<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ABCDE</title>
  
  <subtitle>abcde</subtitle>
  <link href="http://hellohero.51vip.biz/atom.xml" rel="self"/>
  
  <link href="http://hellohero.51vip.biz/"/>
  <updated>2020-08-30T03:45:02.942Z</updated>
  <id>http://hellohero.51vip.biz/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://hellohero.51vip.biz/2020/08/29/hello-world/"/>
    <id>http://hellohero.51vip.biz/2020/08/29/hello-world/</id>
    <published>2020-08-28T17:10:25.175Z</published>
    <updated>2020-08-30T03:45:02.942Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span> 😂</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Tomcat源码分析之贝壳篇</title>
    <link href="http://hellohero.51vip.biz/2019/10/06/tomcat%E8%B4%9D%E5%A3%B3%E7%AF%87/"/>
    <id>http://hellohero.51vip.biz/2019/10/06/tomcat%E8%B4%9D%E5%A3%B3%E7%AF%87/</id>
    <published>2019-10-06T04:06:16.000Z</published>
    <updated>2019-10-07T16:37:51.685Z</updated>
    
    <content type="html"><![CDATA[<h3 id="贝壳一"><a href="#贝壳一" class="headerlink" title="贝壳一"></a><font color="red">贝壳一</font></h3><p>拾取地点：Catalina.java的load()里面的initNaming()首次发现<br><img src="https://oostc.oss-cn-shanghai.aliyuncs.com/tomcat/1.jpg" alt="get/setproperty"><br><font color="green">这样就把第一个参数设置成为系统的全局变量！可以在项目的任何一个地方 通过System.getProperty(“变量”);来获得，<br>System.setProperty 相当于一个静态变量  ，存在内存里面！</font></p><h3 id="贝壳二"><a href="#贝壳二" class="headerlink" title="贝壳二"></a><font color="red">贝壳二</font></h3><p>拾取地点：Catalina.java的load()首次发现<br>System.nanoTime()获取纳秒</p><h3 id="贝壳三"><a href="#贝壳三" class="headerlink" title="贝壳三"></a><font color="red">贝壳三</font></h3><p>拾取地点：Catalina.java的load()里面的initDirs()首次发现<br>String temp = System.getProperty(“java.io.tmpdir”);获取操作系统缓存的临时目录，不同操作系统的缓存临时目录不一样，<br>   在Windows的缓存目录为：C:\Users\登录用户~1\AppData\Local\Temp<br>   Linux：/tmp<br><a href="https://www.cnblogs.com/nbjin/p/7392541.html">其他系统属性getproperty获取方式</a></p><h3 id="贝壳四"><a href="#贝壳四" class="headerlink" title="贝壳四"></a><font color="red">贝壳四</font></h3><p>拾取地点：Catalina.java的load()里面的initNaming()-org.apache.naming的Constants.java首次发现<br><img src="https://oostc.oss-cn-shanghai.aliyuncs.com/tomcat/5.jpg"><br>当运行未知的Java程序的时候，该程序可能有恶意代码（删除系统文件、重启系统等），为了防止运行恶意代码对系统产生影响，需要对运行的代码的权限进行控制，这时候就要启用Java安全管理器。默认的安全管理器配置文件是 $JAVA_HOME/jre/lib/security/java.policy，即当未指定配置文件时，将会使用该配置。<br>当出现关于安全管理的报错的时候，基本有两种方式来解决。<br>取消安全管理器<br>　　一般情况下都是无意启动安全管理器，所以这时候只需要把安全管理器进行关闭，去掉启动参数即可。<br>增加相应权限<br>　　若因为没有权限报错，则报错信息中会有请求的权限和请求什么权限，如下：<br>Exception in thread “main” java.security.AccessControlException: access denied (java.io.FilePermission E:\pack\a\a.txt write)<br>　　上面例子，请求资源E:\pack\a\a.txt，的FilePermission的写权限没有，因此被拒绝。<br>　　也可以开放所有权限：<br>grant {<br>    permission java.security.AllPermission;<br>};<br>举例：<br><img src="https://oostc.oss-cn-shanghai.aliyuncs.com/tomcat/6.jpg"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;贝壳一&quot;&gt;&lt;a href=&quot;#贝壳一&quot; class=&quot;headerlink&quot; title=&quot;贝壳一&quot;&gt;&lt;/a&gt;&lt;font color=&quot;red&quot;&gt;贝壳一&lt;/font&gt;&lt;/h3&gt;&lt;p&gt;拾取地点：Catalina.java的load()里面的initNaming()首</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>微服务设计原则</title>
    <link href="http://hellohero.51vip.biz/2019/08/04/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>http://hellohero.51vip.biz/2019/08/04/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</id>
    <published>2019-08-03T17:49:30.000Z</published>
    <updated>2019-08-06T12:30:26.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微服务设计原则"><a href="#微服务设计原则" class="headerlink" title="微服务设计原则"></a>微服务设计原则</h1><h3 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h3><h3 id="无状态服务"><a href="#无状态服务" class="headerlink" title="无状态服务"></a>无状态服务</h3><p>即无状态业务计算 业务层<br>有状态数据处理 数据层</p><h1 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h1><p>可拆分、可独立部署、服务间松耦合、服务内高内聚、系统由多个服务组成<br>可伸缩性强、测试简单（影响的面窄了）、团队工作编码容易、系统迭代容易（部署快）<br>缺点部署的系统变多 接口变化造成影响其它服务的调用</p><h1 id="SOA与-微服务"><a href="#SOA与-微服务" class="headerlink" title="SOA与 微服务"></a>SOA与 微服务</h1><p>SOA客户端与服务端之间采用的是企业服务总线 而微服务是服务的注册与发现</p><h1 id="AKF原则-沿X、Y、Z轴无限扩展"><a href="#AKF原则-沿X、Y、Z轴无限扩展" class="headerlink" title="AKF原则 沿X、Y、Z轴无限扩展"></a>AKF原则 沿X、Y、Z轴无限扩展</h1><p>Y轴是纵向对系统服务的拆分<br>X轴是横向对系统服务的复制集群并且做负载均衡<br>Z轴是完整复制整个系统分别提供不同用户群体使用，完全隔离（如PC用户、移动端用户）<br>或者按数据分区（如打车软件根据用户的不同城市分区、根据查询的类型分区）</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;微服务设计原则&quot;&gt;&lt;a href=&quot;#微服务设计原则&quot; class=&quot;headerlink&quot; title=&quot;微服务设计原则&quot;&gt;&lt;/a&gt;微服务设计原则&lt;/h1&gt;&lt;h3 id=&quot;前后端分离&quot;&gt;&lt;a href=&quot;#前后端分离&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="微服务设计原则" scheme="http://hellohero.51vip.biz/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
    
    <category term="微服务设计原则" scheme="http://hellohero.51vip.biz/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu</title>
    <link href="http://hellohero.51vip.biz/2019/08/03/ubuntu/"/>
    <id>http://hellohero.51vip.biz/2019/08/03/ubuntu/</id>
    <published>2019-08-02T20:35:37.000Z</published>
    <updated>2019-08-03T08:36:55.660Z</updated>
    
    <content type="html"><![CDATA[<h2 id="修改管理员root密码"><a href="#修改管理员root密码" class="headerlink" title="修改管理员root密码"></a>修改管理员root密码</h2><p>sudo passwd root 输入当前用户的密码 输入root的新密码 重复输入root的密码</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;修改管理员root密码&quot;&gt;&lt;a href=&quot;#修改管理员root密码&quot; class=&quot;headerlink&quot; title=&quot;修改管理员root密码&quot;&gt;&lt;/a&gt;修改管理员root密码&lt;/h2&gt;&lt;p&gt;sudo passwd root 输入当前用户的密码 输入root的</summary>
      
    
    
    
    <category term="ubuntu" scheme="http://hellohero.51vip.biz/categories/ubuntu/"/>
    
    
    <category term="ubuntu" scheme="http://hellohero.51vip.biz/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Springboot定时任务</title>
    <link href="http://hellohero.51vip.biz/2019/07/29/Springboot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://hellohero.51vip.biz/2019/07/29/Springboot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</id>
    <published>2019-07-28T18:48:29.000Z</published>
    <updated>2019-07-29T08:10:39.031Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/shamo89/p/8341400.html">Springboot定时任务</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/shamo89/p/8341400.html&quot;&gt;Springboot定时任务&lt;/a&gt;&lt;/p&gt;
&lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji</summary>
      
    
    
    
    <category term="Springboot定时任务" scheme="http://hellohero.51vip.biz/categories/Springboot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
    
    <category term="Springboot定时任务" scheme="http://hellohero.51vip.biz/tags/Springboot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>转_springboot的starter</title>
    <link href="http://hellohero.51vip.biz/2019/07/28/starter/"/>
    <id>http://hellohero.51vip.biz/2019/07/28/starter/</id>
    <published>2019-07-28T00:40:07.000Z</published>
    <updated>2019-07-28T16:11:09.322Z</updated>
    
    <content type="html"><![CDATA[<p>原博客<a href="https://mp.weixin.qq.com/s/tKr_shLQnvcQADr4mvcU3A">https://mp.weixin.qq.com/s/tKr_shLQnvcQADr4mvcU3A</a><br>Starter 的核心就是条件注解 @Conditional ，当 classpath 下存在某一个 Class 时，某个配置才会生效<br>自定义 Starter ，需要首先创建一个普通的 Maven 项目，创建完成后，添加 Starter 的自动化配置类即可，如下：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>autoconfigure<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.1</span><span class="token punctuation">.</span><span class="token number">4</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>配置完成后，我们首先创建一个 HelloProperties 类，用来接受 application.properties 中注入的值</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"javaboy"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_NAME <span class="token operator">=</span> <span class="token string">"江南一点雨"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_MSG <span class="token operator">=</span> <span class="token string">"牧码小子"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name <span class="token operator">=</span> DEFAULT_NAME<span class="token punctuation">;</span>    <span class="token keyword">private</span> String msg <span class="token operator">=</span> DEFAULT_MSG<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMsg</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个配置类很好理解，将 application.properties 中配置的属性值直接注入到这个实例中， @ConfigurationProperties 类型安全的属性注入，即将 application.properties 文件中前缀为 javaboy 的属性注入到这个类对应的属性上， 最后使用时候，application.properties 中的配置文件，大概如下：</p><pre class=" language-java"><code class="language-java">javaboy<span class="token punctuation">.</span>name<span class="token operator">=</span>zhangsanjavaboy<span class="token punctuation">.</span>msg<span class="token operator">=</span>java</code></pre><p>关注类型安全的属性注入，读者可以参考松哥之前的这篇文章：Spring Boot中的yaml配置简介，这篇文章虽然是讲 yaml 配置，但是关于类型安全的属性注入和 properties 是一样的。<br>配置完成 HelloProperties 后，接下来我们来定义一个 HelloService ，然后定义一个简单的 say 方法， HelloService 的定义如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name <span class="token operator">+</span> <span class="token string">" say "</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">" !"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMsg</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个很简单，没啥好说的。<br>接下来就是我们的重轴戏，自动配置类的定义，用了很多别人定义的自定义类之后，我们也来自己定义一个自定义类。先来看代码吧，一会松哥再慢慢解释：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>HelloProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>HelloService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServiceAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    HelloProperties helloProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    HelloService <span class="token function">helloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        HelloService helloService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        helloService<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>helloProperties<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        helloService<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span>helloProperties<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> helloService<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>关于这一段自动配置，解释如下：<br>•首先 @Configuration 注解表明这是一个配置类。<br>•@EnableConfigurationProperties 注解是使我们之前配置的 @ConfigurationProperties 生效，让配置的属性成功的进入 Bean 中。<br>•@ConditionalOnClass 表示当项目当前 classpath 下存在 HelloService 时，后面的配置才生效。<br>•自动配置类中首先注入 HelloProperties ，这个实例中含有我们在 application.properties 中配置的相关数据。<br>•提供一个 HelloService 的实例，将 HelloProperties 中的值注入进去。<br>做完这一步之后，我们的自动化配置类就算是完成了，接下来还需要一个 spring.factories 文件，那么这个文件是干嘛的呢？大家知道我们的 Spring Boot 项目的启动类都有一个 @SpringBootApplication 注解，这个注解的定义如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> TypeExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span>                classes <span class="token operator">=</span> AutoConfigurationExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>大家看到这是一个组合注解，其中的一个组合项就是 @EnableAutoConfiguration ，这个注解是干嘛的呢？<br>@EnableAutoConfiguration 表示启用 Spring 应用程序上下文的自动配置，该注解会自动导入一个名为 AutoConfigurationImportSelector 的类,而这个类会去读取一个名为 spring.factories 的文件, spring.factories 中则定义需要加载的自动化配置类，我们打开任意一个框架的 Starter ，都能看到它有一个 spring.factories 文件，例如 MyBatis 的 Starter 如下：</p><p>那么我们自定义 Starter 当然也需要这样一个文件，我们首先在 Maven 项目的 resources 目录下创建一个名为 META-INF 的文件夹，然后在文件夹中创建一个名为 spring.factories 的文件，文件内容如下：<br>org.springframework.boot.autoconfigure.EnableAutoConfiguration=org.javaboy.mystarter.HelloServiceAutoConfiguration<br>在这里指定我们的自动化配置类的路径即可。<br>如此之后我们的自动化配置类就算完成了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;原博客&lt;a href=&quot;https://mp.weixin.qq.com/s/tKr_shLQnvcQADr4mvcU3A&quot;&gt;https://mp.weixin.qq.com/s/tKr_shLQnvcQADr4mvcU3A&lt;/a&gt;&lt;br&gt;Starter 的核心就是条件注解</summary>
      
    
    
    
    <category term="starter" scheme="http://hellohero.51vip.biz/categories/starter/"/>
    
    
    <category term="starter" scheme="http://hellohero.51vip.biz/tags/starter/"/>
    
  </entry>
  
  <entry>
    <title>Eureka</title>
    <link href="http://hellohero.51vip.biz/2019/07/28/Eureka/"/>
    <id>http://hellohero.51vip.biz/2019/07/28/Eureka/</id>
    <published>2019-07-27T19:14:56.000Z</published>
    <updated>2019-08-05T15:53:40.211Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Eureka简介"><a href="#Eureka简介" class="headerlink" title="Eureka简介"></a>Eureka简介</h3><p>Eureka相当于QQ群的群主 而各个服务提供者就是群成员，成员列表就是服务注册列表<br>Eureka 注册到服务列表叫创建租约 发送心跳叫续约（有效时间30s）<br>Eureka是服务注册中心，但当注册中心集群时，Eureka也做为客户端，向其它注册中心注册自己，同时获取其它注册中心的维护的服务列表，当有新的客户端注册进来时，Eureka会通知其它的注册中心，异步更新服务列表，达到高可用的目的<br>Eureka Server节点在短时间内丢失过多的客户端时（可能发送了网络故障），那么这个节点将进入自我保护模式，不再注销任何微服务，当网络故障回复后，该节点会自动退出自我保护模式<br>@EnableDiscoveryClient @EnableEurekaServer</p><h3 id="Eureka高可用"><a href="#Eureka高可用" class="headerlink" title="Eureka高可用"></a>Eureka高可用</h3><p>Eureka两两互相注册，而Client需要配置所有Eureka,因为Eureka是互相注册的，即使一个Eureka down掉 其他Eureka仍然可以提供服务<br><a href="https://blog.csdn.net/tianyaleixiaowu/article/details/78184793">Eureka集群高可用</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Eureka简介&quot;&gt;&lt;a href=&quot;#Eureka简介&quot; class=&quot;headerlink&quot; title=&quot;Eureka简介&quot;&gt;&lt;/a&gt;Eureka简介&lt;/h3&gt;&lt;p&gt;Eureka相当于QQ群的群主 而各个服务提供者就是群成员，成员列表就是服务注册列表&lt;br&gt;</summary>
      
    
    
    
    <category term="Eureka" scheme="http://hellohero.51vip.biz/categories/Eureka/"/>
    
    
    <category term="Eureka" scheme="http://hellohero.51vip.biz/tags/Eureka/"/>
    
  </entry>
  
  <entry>
    <title>锁</title>
    <link href="http://hellohero.51vip.biz/2019/07/26/%E9%94%81/"/>
    <id>http://hellohero.51vip.biz/2019/07/26/%E9%94%81/</id>
    <published>2019-07-26T03:35:20.000Z</published>
    <updated>2019-07-30T14:08:15.559Z</updated>
    
    <content type="html"><![CDATA[<p>上锁就是修改对象头信息 成功则可以访问，不成功则阻塞（分为自旋锁和一直等待唤醒）<br>解锁就是重置对象信息</p><h1 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h1><p>synchronized是可重入的即在同一个对象中，没进入一次锁计数器加一，只有为0时其他对象才能进入，防止其他对象读取同一对象的其他带有相同锁的sync方法直接调用 即只有当前对象才能再次获取锁 其他不能持有锁阻塞<br>使用重入锁后就没有这种情况，每次访问或必须在方法里解锁，才不会阻塞其他要访问该锁的线程<br>Synchronized和reentranlock都是可重入锁 区别在于renntranlock可以指定公平/非公平锁</p><h1 id="锁的升级"><a href="#锁的升级" class="headerlink" title="锁的升级"></a>锁的升级</h1><p>偏向锁：一个线程，无竞争，每次比较锁标志，不是自己的锁即通过无锁机制竞争，成功则把对象头设为线程ID<br>失败则成为轻量级锁，轻量级锁允许线程等待（不是阻塞，而是不断获取锁）<br>时间不能太长，太长则变为重量级锁</p><p>Xms和Xmx一般设置成1:1比例，原因是避免在GC后调整堆大小带来的压力<br>-Xms等价于-XX:InitialHeapSize,-Xmx等价于-XX:MaxHeapSize。所以他们都是XX类型参数</p><h1 id="atomic"><a href="#atomic" class="headerlink" title="atomic"></a>atomic</h1><p>原子性操作 在变量赋值时会先CAS判断是否被其他线程修改过，即当前值和之前拿来的值是否一致，不一致需要CAS等待后更新，才能赋值</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上锁就是修改对象头信息 成功则可以访问，不成功则阻塞（分为自旋锁和一直等待唤醒）&lt;br&gt;解锁就是重置对象信息&lt;/p&gt;
&lt;h1 id=&quot;可重入锁&quot;&gt;&lt;a href=&quot;#可重入锁&quot; class=&quot;headerlink&quot; title=&quot;可重入锁&quot;&gt;&lt;/a&gt;可重入锁&lt;/h1&gt;&lt;p&gt;</summary>
      
    
    
    
    <category term="锁" scheme="http://hellohero.51vip.biz/categories/%E9%94%81/"/>
    
    
    <category term="锁" scheme="http://hellohero.51vip.biz/tags/%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>Java正则表达式验证IP，邮箱，电话</title>
    <link href="http://hellohero.51vip.biz/2019/07/26/Java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%AA%8C%E8%AF%81IP%EF%BC%8C%E9%82%AE%E7%AE%B1%EF%BC%8C%E7%94%B5%E8%AF%9D/"/>
    <id>http://hellohero.51vip.biz/2019/07/26/Java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%AA%8C%E8%AF%81IP%EF%BC%8C%E9%82%AE%E7%AE%B1%EF%BC%8C%E7%94%B5%E8%AF%9D/</id>
    <published>2019-07-26T02:28:51.000Z</published>
    <updated>2019-07-26T14:31:10.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-判断是否是正确的IP"><a href="#1-判断是否是正确的IP" class="headerlink" title="1:判断是否是正确的IP"></a>1:判断是否是正确的IP</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**         * 用正则表达式进行判断         */</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isIPAddressByRegex</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String regex <span class="token operator">=</span> <span class="token string">"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 判断ip地址是否与正则表达式匹配</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//如果某个数字不是0到255之间的数 就返回false</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> temp <span class="token operator">></span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h1 id="2-判断是否是正确的邮箱地址"><a href="#2-判断是否是正确的邮箱地址" class="headerlink" title="2:判断是否是正确的邮箱地址"></a>2:判断是否是正确的邮箱地址</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/***正则表达式验证邮箱*/</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isEmail</span><span class="token punctuation">(</span>String email<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>email <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            String regex <span class="token operator">=</span> <span class="token string">"\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*"</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> email<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h1 id="3-判断是否是手机号码"><a href="#3-判断是否是手机号码" class="headerlink" title="3:判断是否是手机号码"></a>3:判断是否是手机号码</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/***正则表达式验证手机*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">orPhoneNumber</span><span class="token punctuation">(</span>String phoneNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>phoneNumber <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>phoneNumber<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>           String regex <span class="token operator">=</span> <span class="token string">"^1[3|4|5|8][0-9]\\d{8}$"</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> phoneNumber<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-判断是否是正确的IP&quot;&gt;&lt;a href=&quot;#1-判断是否是正确的IP&quot; class=&quot;headerlink&quot; title=&quot;1:判断是否是正确的IP&quot;&gt;&lt;/a&gt;1:判断是否是正确的IP&lt;/h1&gt;&lt;pre class=&quot; language-java&quot;&gt;&lt;code</summary>
      
    
    
    
    <category term="Java正则表达式验证IP，邮箱，电话" scheme="http://hellohero.51vip.biz/categories/Java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%AA%8C%E8%AF%81IP%EF%BC%8C%E9%82%AE%E7%AE%B1%EF%BC%8C%E7%94%B5%E8%AF%9D/"/>
    
    
    <category term="Java正则表达式验证IP，邮箱，电话" scheme="http://hellohero.51vip.biz/tags/Java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%AA%8C%E8%AF%81IP%EF%BC%8C%E9%82%AE%E7%AE%B1%EF%BC%8C%E7%94%B5%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>注解</title>
    <link href="http://hellohero.51vip.biz/2019/07/26/%E6%B3%A8%E8%A7%A3/"/>
    <id>http://hellohero.51vip.biz/2019/07/26/%E6%B3%A8%E8%A7%A3/</id>
    <published>2019-07-26T00:41:36.000Z</published>
    <updated>2019-07-26T00:45:26.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Service文件"><a href="#Service文件" class="headerlink" title="Service文件"></a><strong>Service文件</strong></h1><h2 id="Service"><a href="#Service" class="headerlink" title="@Service "></a><font color="red"><strong>@Service</strong> </font></h2><p>如果一个类带了@Service注解，将自动注册到Spring容器，不需要再在applicationContext.xml文件定义bean了</p><h2 id="Autowired"><a href="#Autowired" class="headerlink" title="** @Autowired  ** "></a><font color="red">** @Autowired  ** </font></h2><p>@Autowired 注释，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。 通过 @Autowired的使用来消除 set ，get方法。在使用@Autowired之前，我们对一个bean配置起属性时，是这用用的</p><h1 id="Cacheable注解"><a href="#Cacheable注解" class="headerlink" title="Cacheable注解"></a>Cacheable注解</h1><p>@Cacheable可以标记在一个方法上，也可以标记在一个类上。当标记在一个方法上时表示该方法是支持缓存的，当标记在一个类上时则表示该类所有的方法都是支持缓存的。<br> 对于一个支持缓存的方法，Spring会在其被调用后将其返回值缓存起来，以保证下次利用同样的参数来执行该方法时可以直接从缓存中获取结果，而不需要再次执行该方法。<br> Spring在缓存方法的返回值时是以键值对进行缓存的，值就是方法的返回结果，至于键的话，Spring又支持两种策略，默认策略和自定义策略，这个稍后会进行说明。<br> 需要注意的是当一个支持缓存的方法在对象内部被调用时是不会触发缓存功能的。@Cacheable可以指定三个属性，value、key和condition<br> <a href="https://www.cnblogs.com/fashflying/p/6908028.html">详情参照</a></p><h1 id="Controller文件"><a href="#Controller文件" class="headerlink" title="Controller文件"></a>Controller文件</h1><p>@RestController<br>@RequestMapping(“user”)<br>@GetMapping(“{id}”)</p><h2 id="Controller"><a href="#Controller" class="headerlink" title="@Controller "></a><font color="red"><strong>@Controller</strong> </font></h2><p>@Controller 用于标记在一个类上，使用它标记的类就是一个SpringMVC Controller 对象<br>使用@Controller，配合视图解析器可以返回jsp、html等页面，如果要返回json，则需要再加@ResponseBody<br>或者直接使用@RestController，此时只能返回json，不能返回jsp、html</p><h2 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="**@ResponseBody  ** "></a><font color="red">**@ResponseBody  ** </font></h2><p>@RequestMapping(“url”)，这里的 url写的是请求路径的一部分，一般作用在 Controller的方法上，作为请求的映射地址</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//类级别映射，可以没有，一般用于减少书写量</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">myController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//方法级别映射，必须有，那么这个方法的访问地址就是/test/aaa，请求到的页面就是test.jsp【当然，这里的.jsp需要在配置文件中配置】</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/aaa"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getMyName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="RequestBody"><a href="#RequestBody" class="headerlink" title="** @RequestBody  ** "></a><font color="red">** @RequestBody  ** </font></h2><p>@ResponseBody是作用在方法上的，@ResponseBody 表示该方法的返回结果直接写入 HTTP response body 中<br>一般在异步获取数据时使用【也就是AJAX】，在使用 @RequestMapping后，返回值通常解析为跳转路径，但是加上 @ResponseBody 后返回结果不会被解析为跳转路径，而是直接写入 HTTP response body 中。<br>比如异步获取 json 数据，加上 @ResponseBody 后，会直接返回 json 数据。@RequestBody 将 HTTP 请求正文插入方法中，使用适合的 HttpMessageConverter 将请求体写入某个对象。</p><pre class=" language-java"><code class="language-java">   <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/login.do"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> Object <span class="token function">login</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String password<span class="token punctuation">,</span> HttpSession session<span class="token punctuation">)</span> <span class="token punctuation">{</span>        user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">checkLogin</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonResult</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="Autowired-1"><a href="#Autowired-1" class="headerlink" title="** @Autowired  ** "></a><font color="red">** @Autowired  ** </font></h2><p>@Autowired 注释，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。 通过 @Autowired的使用来消除 set ，get方法。在使用@Autowired之前，我们对一个bean配置起属性时，是这用用的</p><h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="** @RequestParam ** "></a><font color="red">** @RequestParam ** </font></h2><p> @RequestParam（org.springframework.web.bind.annotation.RequestParam）用于将指定的请求参数赋值给方法中的形参</p><pre class=" language-java"><code class="language-java">   <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/requestParamTest"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">requestParamTest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"username"</span><span class="token punctuation">)</span> String userName<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"usernick"</span><span class="token punctuation">)</span> String userNick<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"requestParam Test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"username: "</span> <span class="token operator">+</span> userName<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"usernick: "</span> <span class="token operator">+</span> userNick<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>也可以不使用@RequestParam，直接接收，此时要求controller方法中的参数名称要跟form中name名称一致</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/requestParamTest"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">requestParamTest</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String usernick<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"requestParam Test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"username: "</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"usernick: "</span> <span class="token operator">+</span> usernick<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h1 id="springApplication注解"><a href="#springApplication注解" class="headerlink" title="springApplication注解"></a>springApplication注解</h1><p>springApplication=声明是配置类+开始配置+自动扫描<br>@SpringApplication文件默认扫描它同级及以下的<br>如果不是放在最顶级包则需要加@ComponentScan才能加载到其他包的程序</p><h1 id="springboot工作流程"><a href="#springboot工作流程" class="headerlink" title="springboot工作流程"></a>springboot工作流程</h1><h1 id="springBoot启动项目"><a href="#springBoot启动项目" class="headerlink" title="springBoot启动项目"></a><strong>springBoot启动项目</strong></h1><p><a href="https://github.com/54321decba/tu/tree/master/springboot%E5%90%AF%E5%8A%A8%E9%A1%B9%E7%9B%AE">SpringBoot启动项目地址</a><br>我们开发任何一个Spring Boot项目，都会用到如下的启动类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从上面代码可以看出，Annotation定义（@SpringBootApplication）和类定义（SpringApplication.run）最为耀眼，所以要揭开SpringBoot的神秘面纱，我们要从这两位开始就可以了。<br><strong>SpringBootApplication注解的源码</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 注解的适用范围，其中TYPE用于描述类、接口（包括包注解类型）或enum声明</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 注解的生命周期，保留到class文件中（三个生命周期）</span><span class="token annotation punctuation">@Documented</span>                          <span class="token comment" spellcheck="true">// 表明这个注解应该被javadoc记录</span><span class="token annotation punctuation">@Inherited</span>                           <span class="token comment" spellcheck="true">// 子类可以继承该注解</span><span class="token annotation punctuation">@SpringBootConfiguration</span>             <span class="token comment" spellcheck="true">// 继承了Configuration，表示当前是注解类</span><span class="token annotation punctuation">@EnableAutoConfiguration</span>             <span class="token comment" spellcheck="true">// 开启springboot的注解功能，springboot的四大神器之一，其借助@import的帮助</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 扫描路径设置（具体使用待确认）</span>        <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> TypeExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> AutoConfigurationExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>虽然定义使用了多个Annotation进行了原信息标注，但实际上重要的只有三个Annotation：<br>@Configuration（@SpringBootConfiguration点开查看发现里面还是应用了@Configuration）<br>@EnableAutoConfiguration<br>@ComponentScan<br>所以，如果我们使用如下的SpringBoot启动类，整个SpringBoot应用依然可以与之前的启动类功能对等：<br>即SpringBootApplication=Configuration+EnableAutoConfiguration+ComponentScan</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>既然作用一样，写这3个注解比较累，那直接写@即SpringBootApplication更简洁一点    </p><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><p>标注了@Configuration之后说明本身是一个IoC容器的配置类<br>它也可以使用xml格式</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span>       <span class="token keyword">default</span><span class="token operator">-</span>lazy<span class="token operator">-</span>init<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>bean定义<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><p>SpringBoot社区推荐使用基于JavaConfig的配置形式  ，即使用注解的方式<br>注册bean定义层面<br>基于XML的配置形式是这样：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"mockService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"..MockServiceImpl"</span><span class="token operator">></span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><p>而基于JavaConfig的配置形式是这样的：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MockConfiguration</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MockService <span class="token function">mockService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MockServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="任何一个标注了-Bean的方法，其返回值将作为一个bean定义注册到Spring的IoC容器，方法名将默认成该bean定义的id。"><a href="#任何一个标注了-Bean的方法，其返回值将作为一个bean定义注册到Spring的IoC容器，方法名将默认成该bean定义的id。" class="headerlink" title="任何一个标注了@Bean的方法，其返回值将作为一个bean定义注册到Spring的IoC容器，方法名将默认成该bean定义的id。"></a>任何一个标注了@Bean的方法，其返回值将作为一个bean定义注册到Spring的IoC容器，方法名将默认成该bean定义的id。</h2><p>为了表达bean与bean之间的依赖关系，在XML形式中一般是这样：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"mockService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"..MockServiceImpl"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>propery name <span class="token operator">=</span><span class="token string">"dependencyService"</span> ref<span class="token operator">=</span><span class="token string">"dependencyService"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"dependencyService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"DependencyServiceImpl"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><p>而基于JavaConfig的配置形式是这样的：</p><pre><code>@Configurationpublic class MockConfiguration{    @Bean    public MockService mockService(){        return new MockServiceImpl(dependencyService());    }    @Bean    public DependencyService dependencyService(){        return new DependencyServiceImpl();    }}</code></pre><p>如果一个bean的定义依赖其他bean,则直接调用对应的JavaConfig类中依赖bean的创建方法就可以了。</p><h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><p>ComponentScan扫描有@Component、@Repository或bean的类加载到IoC容器中</p><h3 id="SpringBoot启动类注解"><a href="#SpringBoot启动类注解" class="headerlink" title="SpringBoot启动类注解"></a>SpringBoot启动类注解</h3><h1 id="Configuration-Bean"><a href="#Configuration-Bean" class="headerlink" title="@Configuration+@Bean"></a>@Configuration+@Bean</h1><p>@Configuration用于定义配置类，可替换xml配置文件，被注解的类内部包含有一个或多个被@Bean注解的方法，这些方法将会被AnnotationConfigApplicationContext或AnnotationConfigWebApplicationContext类进行扫描，并用于构建bean定义，初始化Spring容器</p><h1 id="ComponentScan-basePackages-“com-pipi”"><a href="#ComponentScan-basePackages-“com-pipi”" class="headerlink" title="@ComponentScan(basePackages = “com.pipi”)"></a>@ComponentScan(basePackages = “com.pipi”)</h1><p>不声明出来只有SpringBootApplication注解默认只扫描和主类处于同包下的Class  </p><h1 id="EnableTransactionManagement"><a href="#EnableTransactionManagement" class="headerlink" title="@EnableTransactionManagement"></a>@EnableTransactionManagement</h1><p>Spring Boot 使用的事务非常简单，首先使用注解 @EnableTransactionManagement 开启事务支持后，然后在访问数据库的Service方法上添加注解 @Transactional 便可</p><h1 id="MapperScan-basePackages-”com-pipi-dao-mapper”"><a href="#MapperScan-basePackages-”com-pipi-dao-mapper”" class="headerlink" title="@MapperScan(basePackages=”com.pipi.dao.mapper”)"></a>@MapperScan(basePackages=”com.pipi.dao.mapper”)</h1><h1 id="SpringBootApplication-Configuration-ComponentScan-EnableAutoConfiguration"><a href="#SpringBootApplication-Configuration-ComponentScan-EnableAutoConfiguration" class="headerlink" title="@SpringBootApplication=+@Configuration+@ComponentScan+@EnableAutoConfiguration"></a>@SpringBootApplication=+@Configuration+@ComponentScan+@EnableAutoConfiguration</h1><p><a href="https://viabcde.github.io/2018/07/01/2018-07-01-@springApplication/">SpringBootApplication注解</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>pipi<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>MapperScan<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletRegistrationBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ComponentScan<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableTransactionManagement<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>DispatcherServlet<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.pipi"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages<span class="token operator">=</span><span class="token string">"com.pipi.dao.mapper"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PipiApplication</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletRegistrationBean <span class="token function">dispatcherRegistration</span><span class="token punctuation">(</span>DispatcherServlet dispatcherServlet<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ServletRegistrationBean reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span>dispatcherServlet<span class="token punctuation">)</span><span class="token punctuation">;</span>        reg<span class="token punctuation">.</span><span class="token function">getUrlMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reg<span class="token punctuation">.</span><span class="token function">addUrlMappings</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> reg<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="ConfigurationProperties注解"><a href="#ConfigurationProperties注解" class="headerlink" title="ConfigurationProperties注解"></a>ConfigurationProperties注解</h1><p>@ConfigurationProperties注解主要用来把properties配置文件转化为bean来使用的<br>而@EnableConfigurationProperties注解的作用：<br>使@ConfigurationProperties注解生效。如果只配置@ConfigurationProperties注解，在IOC容器中是获取不到properties配置文件转化的bean的</p><h1 id="SpringBoot-测试类"><a href="#SpringBoot-测试类" class="headerlink" title="SpringBoot 测试类"></a>SpringBoot 测试类</h1><p>在类上标注@RunWith(SpringRunner.class) @SpringBootTest注解 方法上标注@Test注解</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>leyou<span class="token punctuation">.</span>search<span class="token punctuation">.</span>client<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>leyou<span class="token punctuation">.</span>item<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Category<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>RunWith<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>SpringRunner<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author bystander * @date 2018/9/22 */</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CategoryClientTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>   <span class="token keyword">private</span> CategoryClient categoryClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQueryCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Category<span class="token operator">></span> list <span class="token operator">=</span> categoryClient<span class="token punctuation">.</span><span class="token function">queryByIds</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> 2L<span class="token punctuation">,</span> 3L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>public interface UserMapper {    @Select("SELECT * FROM users")    @Results({        @Result(property = "userSex",  column = "user_sex", javaType = UserSexEnum.class),        @Result(property = "nickName", column = "nick_name")    })    List&lt;UserEntity&gt; getAll();    @Select("SELECT * FROM users WHERE id = #{id}")    @Results({        @Result(property = "userSex",  column = "user_sex", javaType = UserSexEnum.class),        @Result(property = "nickName", column = "nick_name")    })    UserEntity getOne(Long id);    @Insert("INSERT INTO users(userName,passWord,user_sex) VALUES(#{userName}, #{passWord}, #{userSex})")    void insert(UserEntity user);    @Update("UPDATE users SET userName=#{userName},nick_name=#{nickName} WHERE id =#{id}")    void update(UserEntity user);    @Delete("DELETE FROM users WHERE id =#{id}")    void delete(Long id);}</code></pre><p>@Select 是查询类的注解，所有的查询均使用这个<br>@Result 修饰返回的结果集，关联实体类属性和数据库字段一一对应，如果实体类属性和数据库属性名保持一致，就不需要这个属性来修饰。<br>@Insert 插入数据库使用，直接传入实体类会自动解析属性到对应的值<br>@Update 负责修改，也可以直接传入对象<br>@delete 负责删除<br><strong>注意，使用#符号和$符号的不同：</strong>  </p><pre><code>// This example creates a preparedstatement, something like select * from teacher where name = ?;@Select("Select * from teacher where name = #{name}")Teacher selectTeachForGivenName(@Param("name") String name);// This example creates n inlined statement, something like select * from teacher where name = 'someName';@Select("Select * from teacher where name = '${name}'")Teacher selectTeachForGivenName(@Param("name") String name);</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Service文件&quot;&gt;&lt;a href=&quot;#Service文件&quot; class=&quot;headerlink&quot; title=&quot;Service文件&quot;&gt;&lt;/a&gt;&lt;strong&gt;Service文件&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;Service&quot;&gt;&lt;a href=&quot;#S</summary>
      
    
    
    
    <category term="注解" scheme="http://hellohero.51vip.biz/categories/%E6%B3%A8%E8%A7%A3/"/>
    
    
    <category term="注解" scheme="http://hellohero.51vip.biz/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC</title>
    <link href="http://hellohero.51vip.biz/2019/07/26/SpringMVC/"/>
    <id>http://hellohero.51vip.biz/2019/07/26/SpringMVC/</id>
    <published>2019-07-26T00:03:42.000Z</published>
    <updated>2019-07-26T00:05:32.015Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springmvc使用注解实现执行定时任务（定时器）"><a href="#Springmvc使用注解实现执行定时任务（定时器）" class="headerlink" title="Springmvc使用注解实现执行定时任务（定时器）"></a>Springmvc使用注解实现执行定时任务（定时器）</h1><p>1、在Spring配置文件中添加<br>    <a href="task:annotation-driven/">task:annotation-driven/</a><br>2、在需要调用执行定时任务的类中使用注解<br>    @Service<br>    @Lazy(false) //避免spring懒加载导致无效<br>3、在主要执行的定时任务的方法上添加注解<br>@Scheduled(cron = “0 */1 * * * ?”) //当前是1分钟执行一次<br><a href="http://cron.qqe2.com/">点击定时器表达式在线生成</a><br> 举例（建议测试一下）：<br>0 0 10,14,16 * * ? 每天上午10点，下午2点，4点<br>0 0/30 9-17 * * ?   朝九晚五工作时间内每半小时<br>0 0 12 ? * WED 表示每个星期三中午12点<br>“0 0 12 * * ?” 每天中午12点触发<br>“0 15 10 ? * *” 每天上午10:15触发<br>“0 15 10 * * ?” 每天上午10:15触发<br>“0 15 10 * * ? *” 每天上午10:15触发<br>“0 15 10 * * ? 2005” 2005年的每天上午10:15触发<br>“0 * 14 * * ?” 在每天下午2点到下午2:59期间的每1分钟触发<br>“0 0/5 14 * * ?” 在每天下午2点到下午2:55期间的每5分钟触发<br>“0 0/5 14,18 * * ?” 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发<br>“0 0-5 14 * * ?” 在每天下午2点到下午2:05期间的每1分钟触发<br>“0 10,44 14 ? 3 WED” 每年三月的星期三的下午2:10和2:44触发<br>“0 15 10 ? * MON-FRI” 周一至周五的上午10:15触发<br>“0 15 10 15 * ?” 每月15日上午10:15触发<br>“0 15 10 L * ?” 每月最后一日的上午10:15触发<br>“0 15 10 ? * 6L” 每月的最后一个星期五上午10:15触发<br>“0 15 10 ? * 6L 2002-2005” 2002年至2005年的每月的最后一个星期五上午10:15触发<br>“0 15 10 ? * 6#3” 每月的第三个星期五上午10:15触发 </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Springmvc使用注解实现执行定时任务（定时器）&quot;&gt;&lt;a href=&quot;#Springmvc使用注解实现执行定时任务（定时器）&quot; class=&quot;headerlink&quot; title=&quot;Springmvc使用注解实现执行定时任务（定时器）&quot;&gt;&lt;/a&gt;Springmv</summary>
      
    
    
    
    <category term="SpringMVC" scheme="http://hellohero.51vip.biz/categories/SpringMVC/"/>
    
    
    <category term="SpringMVC" scheme="http://hellohero.51vip.biz/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>Maven解决方法</title>
    <link href="http://hellohero.51vip.biz/2019/07/26/Maven%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://hellohero.51vip.biz/2019/07/26/Maven%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2019-07-25T23:58:10.000Z</published>
    <updated>2019-07-26T00:19:26.875Z</updated>
    
    <content type="html"><![CDATA[<h1 id="批量删除Maven本地仓库中未下载完成的jar包（不完整的jar包）"><a href="#批量删除Maven本地仓库中未下载完成的jar包（不完整的jar包）" class="headerlink" title="批量删除Maven本地仓库中未下载完成的jar包（不完整的jar包）"></a>批量删除Maven本地仓库中未下载完成的jar包（不完整的jar包）</h1><p>1、删除repository库目录下所有后缀名是.lastUpdated的文件<br>2、进入maven本地仓库地址：<br>CMD进入windows的路径(或在仓库目录的地址栏直接输入CMD，回车自动打开);<br>3、执行如下命令<br>for /r %i in (*.lastUpdated) do del %i</p><h1 id="Maven设置阿里仓库镜像增加访问速度"><a href="#Maven设置阿里仓库镜像增加访问速度" class="headerlink" title="Maven设置阿里仓库镜像增加访问速度"></a>Maven设置阿里仓库镜像增加访问速度</h1><p>修改maven的setting.xml<br>在mirrors节点下面添加子节点<br> <mirror><br>        <id>nexus-aliyun</id><br>        <mirrorof>central</mirrorof><br>        <name>Nexus aliyun</name><br>        <url><a href="http://maven.aliyun.com/nexus/content/groups/public">http://maven.aliyun.com/nexus/content/groups/public</a></url><br>    </mirror><br>扩展<br>设置依赖包在本地保存位置，同样也是编辑setting.xml文件，<br><localrepository>/xx/xx/xxx/maven/jar</localrepository></p><h2 id="命令行模式安装maven-jar包"><a href="#命令行模式安装maven-jar包" class="headerlink" title="命令行模式安装maven jar包"></a><strong>命令行模式安装maven jar包</strong></h2><p>mvn install:install-file -Dfile=C:\Users\Administrator\Desktop\hibernate-c3p0-4.2.1.final.jar -DgroupId=org.hibernate -DartifactId=hibernate-c3p0 -Dversion=4.2.1 -Dpackaging=jar </p><h2 id="pom-xml中添加阿里云Maven中央仓库配置"><a href="#pom-xml中添加阿里云Maven中央仓库配置" class="headerlink" title="pom.xml中添加阿里云Maven中央仓库配置"></a><font color="red"><strong>pom.xml中添加阿里云Maven中央仓库配置</strong></font></h2><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>repositories<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 代码库 <span class="token operator">--</span><span class="token operator">></span>   <span class="token operator">&lt;</span>repository<span class="token operator">></span>      <span class="token operator">&lt;</span>id<span class="token operator">></span>maven<span class="token operator">-</span>ali<span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>      <span class="token operator">&lt;</span>url<span class="token operator">></span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>nexus<span class="token operator">/</span>content<span class="token operator">/</span>groups<span class="token operator">/</span><span class="token keyword">public</span><span class="token comment" spellcheck="true">//&lt;/url></span>      <span class="token operator">&lt;</span>releases<span class="token operator">></span>         <span class="token operator">&lt;</span>enabled<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>enabled<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>releases<span class="token operator">></span>      <span class="token operator">&lt;</span>snapshots<span class="token operator">></span>         <span class="token operator">&lt;</span>enabled<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>enabled<span class="token operator">></span>         <span class="token operator">&lt;</span>updatePolicy<span class="token operator">></span>always<span class="token operator">&lt;</span><span class="token operator">/</span>updatePolicy<span class="token operator">></span>         <span class="token operator">&lt;</span>checksumPolicy<span class="token operator">></span>fail<span class="token operator">&lt;</span><span class="token operator">/</span>checksumPolicy<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>snapshots<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>repository<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>repositories<span class="token operator">></span></code></pre><h2 id="在pom文件下配置默认的jdk版本"><a href="#在pom文件下配置默认的jdk版本" class="headerlink" title="在pom文件下配置默认的jdk版本"></a><font color="red"><strong>在pom文件下配置默认的jdk版本</strong></font></h2><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 设置默认的jdk <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>profiles<span class="token operator">></span>        <span class="token operator">&lt;</span>profile<span class="token operator">></span>            <span class="token operator">&lt;</span>id<span class="token operator">></span>jdk1<span class="token number">.7</span><span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>            <span class="token operator">&lt;</span>activation<span class="token operator">></span>                <span class="token operator">&lt;</span>activeByDefault<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>activeByDefault<span class="token operator">></span>                <span class="token operator">&lt;</span>jdk<span class="token operator">></span><span class="token number">1.7</span><span class="token operator">&lt;</span><span class="token operator">/</span>jdk<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>activation<span class="token operator">></span>            <span class="token operator">&lt;</span>properties<span class="token operator">></span>                <span class="token operator">&lt;</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>source<span class="token operator">></span><span class="token number">1.7</span><span class="token operator">&lt;</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>source<span class="token operator">></span>                <span class="token operator">&lt;</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>target<span class="token operator">></span><span class="token number">1.7</span><span class="token operator">&lt;</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>target<span class="token operator">></span>                <span class="token operator">&lt;</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>compilerVersion<span class="token operator">></span><span class="token number">1.7</span><span class="token operator">&lt;</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>compilerVersion<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>properties<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>profile<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>profiles<span class="token operator">></span></code></pre><h2 id="或者"><a href="#或者" class="headerlink" title="或者"></a><font color="red"><strong>或者</strong></font></h2><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>build<span class="token operator">></span>  <span class="token operator">&lt;</span>finalName<span class="token operator">></span>comparison<span class="token operator">-</span>data<span class="token operator">-</span>project<span class="token operator">&lt;</span><span class="token operator">/</span>finalName<span class="token operator">></span>  <span class="token operator">&lt;</span>plugins<span class="token operator">></span>       <span class="token operator">&lt;</span>plugin<span class="token operator">></span>          <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>plugins<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>          <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>maven<span class="token operator">-</span>compiler<span class="token operator">-</span>plugin<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>          <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.5</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>          <span class="token operator">&lt;</span>configuration<span class="token operator">></span>              <span class="token operator">&lt;</span>source<span class="token operator">></span><span class="token number">1.8</span><span class="token operator">&lt;</span><span class="token operator">/</span>source<span class="token operator">></span>              <span class="token operator">&lt;</span>target<span class="token operator">></span><span class="token number">1.8</span><span class="token operator">&lt;</span><span class="token operator">/</span>target<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>plugin<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>plugins<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>build<span class="token operator">></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;批量删除Maven本地仓库中未下载完成的jar包（不完整的jar包）&quot;&gt;&lt;a href=&quot;#批量删除Maven本地仓库中未下载完成的jar包（不完整的jar包）&quot; class=&quot;headerlink&quot; title=&quot;批量删除Maven本地仓库中未下载完成的jar包</summary>
      
    
    
    
    <category term="Maven解决方法" scheme="http://hellohero.51vip.biz/categories/Maven%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    
    
    <category term="Maven解决方法" scheme="http://hellohero.51vip.biz/tags/Maven%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>java邮件发送</title>
    <link href="http://hellohero.51vip.biz/2019/07/26/java%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"/>
    <id>http://hellohero.51vip.biz/2019/07/26/java%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/</id>
    <published>2019-07-25T20:37:45.000Z</published>
    <updated>2019-07-26T08:42:21.338Z</updated>
    
    <content type="html"><![CDATA[<p>首先我们需要两个jar包，点击下面即可下载这两个包：<br>JavaMail mail.jar 1.4.5<br>JAF（版本 1.1.1） activation.jar<br>我们这里采用QQ邮箱发送邮件为例，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> ddd<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>activation<span class="token punctuation">.</span>DataHandler<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>activation<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>activation<span class="token punctuation">.</span>FileDataSource<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>Authenticator<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>BodyPart<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>Message<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>Multipart<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>PasswordAuthentication<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>Session<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>Transport<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>internet<span class="token punctuation">.</span>InternetAddress<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>internet<span class="token punctuation">.</span>MimeBodyPart<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>internet<span class="token punctuation">.</span>MimeMessage<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>internet<span class="token punctuation">.</span>MimeMultipart<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>util<span class="token punctuation">.</span>MailSSLSocketFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendEmail</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//设置发件人</span>            String from <span class="token operator">=</span> <span class="token string">"xxx@qq.com"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置收件人</span>            String to <span class="token operator">=</span> <span class="token string">"xxxx@qq.com"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置邮件发送的服务器，这里为QQ邮件服务器</span>            String host <span class="token operator">=</span> <span class="token string">"smtp.qq.com"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取系统属性</span>            Properties properties <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//SSL加密</span>            MailSSLSocketFactory sf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MailSSLSocketFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sf<span class="token punctuation">.</span><span class="token function">setTrustAllHosts</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mail.smtp.ssl.enable"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mail.smtp.ssl.socketFactory"</span><span class="token punctuation">,</span> sf<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置系统属性</span>            properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"mail.smtp.host"</span><span class="token punctuation">,</span> host<span class="token punctuation">)</span><span class="token punctuation">;</span>            properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mail.smtp.auth"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取发送邮件会话、获取第三方登录授权码</span>            Session session <span class="token operator">=</span> Session<span class="token punctuation">.</span><span class="token function">getDefaultInstance</span><span class="token punctuation">(</span>properties<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Authenticator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">protected</span> PasswordAuthentication <span class="token function">getPasswordAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PasswordAuthentication</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> <span class="token string">"第三方登录授权码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Message message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessage</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//防止邮件被当然垃圾邮件处理，披上Outlook的马甲</span>            message<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"X-Mailer"</span><span class="token punctuation">,</span><span class="token string">"Microsoft Outlook Express 6.00.2900.2869"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            message<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InternetAddress</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            message<span class="token punctuation">.</span><span class="token function">addRecipient</span><span class="token punctuation">(</span>Message<span class="token punctuation">.</span>RecipientType<span class="token punctuation">.</span>TO<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InternetAddress</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//邮件标题</span>            message<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"This is the subject line!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BodyPart bodyPart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeBodyPart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bodyPart<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"我发送了文件给你"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Multipart multipart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMultipart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            multipart<span class="token punctuation">.</span><span class="token function">addBodyPart</span><span class="token punctuation">(</span>bodyPart<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//附件</span>            bodyPart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeBodyPart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String fileName <span class="token operator">=</span> <span class="token string">"文件路径"</span><span class="token punctuation">;</span>            DataSource dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileDataSource</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>            bodyPart<span class="token punctuation">.</span><span class="token function">setDataHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DataHandler</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bodyPart<span class="token punctuation">.</span><span class="token function">setFileName</span><span class="token punctuation">(</span><span class="token string">"文件显示的名称"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            multipart<span class="token punctuation">.</span><span class="token function">addBodyPart</span><span class="token punctuation">(</span>bodyPart<span class="token punctuation">)</span><span class="token punctuation">;</span>            message<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span>multipart<span class="token punctuation">)</span><span class="token punctuation">;</span>            Transport<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mail transports successfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>QQ邮箱发送邮件记得要在设置里面开启POP3/SMTP服务,然后获取第三方登录的授权码。</p><p>上面的代码中启用了SSL加密，网上很多人说QQ发送邮件不加上SSL加密会报错，楼主这里不加也是可以发送的不知道为什么，但是为了数据安全还是加上了。</p><p>有些人发送的邮件会被当做垃圾邮件处理，这里我也进行了处理，给邮件头披上Outlook的马甲，当然也可以将邮件内容以HTML格式发送，以防止被当成垃圾邮件。</p><p>上述就是一个简单的java发送QQ带附件的邮件的代码。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先我们需要两个jar包，点击下面即可下载这两个包：&lt;br&gt;JavaMail mail.jar 1.4.5&lt;br&gt;JAF（版本 1.1.1） activation.jar&lt;br&gt;我们这里采用QQ邮箱发送邮件为例，代码如下：&lt;/p&gt;
&lt;pre class=&quot; language</summary>
      
    
    
    
    <category term="java邮件发送" scheme="http://hellohero.51vip.biz/categories/java%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"/>
    
    
    <category term="java邮件发送" scheme="http://hellohero.51vip.biz/tags/java%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"/>
    
  </entry>
  
  <entry>
    <title>配置文件</title>
    <link href="http://hellohero.51vip.biz/2019/07/25/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://hellohero.51vip.biz/2019/07/25/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</id>
    <published>2019-07-24T18:15:40.000Z</published>
    <updated>2019-07-25T07:12:50.477Z</updated>
    
    <content type="html"><![CDATA[<h1 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml "></a><font color="red"><strong>applicationContext.xml</strong> </font></h1><p><strong>总结</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xmlns<span class="token operator">:</span>p<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/p"</span>       xmlns<span class="token operator">:</span>aop<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/aop"</span>       xmlns<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>       xmlns<span class="token operator">:</span>jee<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/jee"</span>       xmlns<span class="token operator">:</span>tx<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/tx"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop<span class="token operator">/</span>spring<span class="token operator">-</span>aop<span class="token operator">-</span><span class="token number">4.0</span><span class="token punctuation">.</span>xsd        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">4.0</span><span class="token punctuation">.</span>xsd        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context<span class="token operator">/</span>spring<span class="token operator">-</span>context<span class="token operator">-</span><span class="token number">4.0</span><span class="token punctuation">.</span>xsd        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>jee http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>jee<span class="token operator">/</span>spring<span class="token operator">-</span>jee<span class="token operator">-</span><span class="token number">4.0</span><span class="token punctuation">.</span>xsd        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>tx http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>tx<span class="token operator">/</span>spring<span class="token operator">-</span>tx<span class="token operator">-</span><span class="token number">4.0</span><span class="token punctuation">.</span>xsd"<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 加载数据库参数 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>context<span class="token operator">:</span>property<span class="token operator">-</span>placeholder location<span class="token operator">=</span><span class="token string">"classpath:conf/jdbc.properties"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.hlk.service.impl"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id <span class="token operator">=</span> <span class="token string">"dataSource"</span> <span class="token keyword">class</span> <span class="token operator">=</span> <span class="token string">"com.alibaba.druid.pool.DruidDataSource"</span> destroy<span class="token operator">-</span>method <span class="token operator">=</span> <span class="token string">"close"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 数据库基本信息配置 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name <span class="token operator">=</span> <span class="token string">"url"</span> value <span class="token operator">=</span> <span class="token string">"${druid.url}"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name <span class="token operator">=</span> <span class="token string">"username"</span> value <span class="token operator">=</span> <span class="token string">"${druid.username}"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name <span class="token operator">=</span> <span class="token string">"password"</span> value <span class="token operator">=</span> <span class="token string">"${druid.password}"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name <span class="token operator">=</span> <span class="token string">"driverClassName"</span> value <span class="token operator">=</span> <span class="token string">"${druid.driverClassName}"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name <span class="token operator">=</span> <span class="token string">"filters"</span> value <span class="token operator">=</span> <span class="token string">"${druid.filters}"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 最大并发连接数 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name <span class="token operator">=</span> <span class="token string">"maxActive"</span> value <span class="token operator">=</span> <span class="token string">"${druid.maxActive}"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 初始化连接数量 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name <span class="token operator">=</span> <span class="token string">"initialSize"</span> value <span class="token operator">=</span> <span class="token string">"${druid.initialSize}"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置获取连接等待超时的时间 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name <span class="token operator">=</span> <span class="token string">"maxWait"</span> value <span class="token operator">=</span> <span class="token string">"${druid.maxWait}"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 最小空闲连接数 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name <span class="token operator">=</span> <span class="token string">"minIdle"</span> value <span class="token operator">=</span> <span class="token string">"${druid.minIdle}"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name <span class="token operator">=</span> <span class="token string">"timeBetweenEvictionRunsMillis"</span> value <span class="token operator">=</span><span class="token string">"${druid.timeBetweenEvictionRunsMillis}"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置一个连接在池中最小生存的时间，单位是毫秒 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name <span class="token operator">=</span> <span class="token string">"minEvictableIdleTimeMillis"</span> value <span class="token operator">=</span><span class="token string">"${druid.minEvictableIdleTimeMillis}"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name <span class="token operator">=</span> <span class="token string">"validationQuery"</span> value <span class="token operator">=</span> <span class="token string">"${druid.validationQuery}"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name <span class="token operator">=</span> <span class="token string">"testWhileIdle"</span> value <span class="token operator">=</span> <span class="token string">"${druid.testWhileIdle}"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name <span class="token operator">=</span> <span class="token string">"testOnBorrow"</span> value <span class="token operator">=</span> <span class="token string">"${druid.testOnBorrow}"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name <span class="token operator">=</span> <span class="token string">"testOnReturn"</span> value <span class="token operator">=</span> <span class="token string">"${druid.testOnReturn}"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name <span class="token operator">=</span> <span class="token string">"maxOpenPreparedStatements"</span> value <span class="token operator">=</span><span class="token string">"${druid.maxOpenPreparedStatements}"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 打开 removeAbandoned 功能 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name <span class="token operator">=</span> <span class="token string">"removeAbandoned"</span> value <span class="token operator">=</span> <span class="token string">"${druid.removeAbandoned}"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">1800</span> 秒，也就是 <span class="token number">30</span> 分钟 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name <span class="token operator">=</span> <span class="token string">"removeAbandonedTimeout"</span> value <span class="token operator">=</span><span class="token string">"${druid.removeAbandonedTimeout}"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 关闭 abanded 连接时输出错误日志 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name <span class="token operator">=</span> <span class="token string">"logAbandoned"</span> value <span class="token operator">=</span> <span class="token string">"${druid.logAbandoned}"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置MyBatis的sqlSessionFactory <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"sqlSessionFactory"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.mybatis.spring.SqlSessionFactoryBean"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"configLocation"</span> value<span class="token operator">=</span><span class="token string">"classpath:conf/mybatis-config.xml"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"mapperLocations"</span> value<span class="token operator">=</span><span class="token string">"classpath:mapper/*.xml"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Mapper接口所在包名，Spring会自动查找其下的Mapper  <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"basePackage"</span> value<span class="token operator">=</span><span class="token string">"com.hlk.dao"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"sqlSessionFactoryBeanName"</span> value<span class="token operator">=</span><span class="token string">"sqlSessionFactory"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置transactionManager事务管理器 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"transactionManager"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置事物通知属性 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>tx<span class="token operator">:</span>advice id<span class="token operator">=</span><span class="token string">"txAdvice"</span> transaction<span class="token operator">-</span>manager<span class="token operator">=</span><span class="token string">"transactionManager"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 定义事物传播特性 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>tx<span class="token operator">:</span>attributes<span class="token operator">></span>            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"insert"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"update*"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"edit*"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"save*"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"add*"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"new*"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"set*"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"remove*"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"delete*"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"change*"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"check*"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"get*"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> read<span class="token operator">-</span>only<span class="token operator">=</span><span class="token string">"true"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"find*"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> read<span class="token operator">-</span>only<span class="token operator">=</span><span class="token string">"true"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"load*"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> read<span class="token operator">-</span>only<span class="token operator">=</span><span class="token string">"true"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"*"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> read<span class="token operator">-</span>only<span class="token operator">=</span><span class="token string">"true"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tx<span class="token operator">:</span>attributes<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>tx<span class="token operator">:</span>advice<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置事物切面 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>aop<span class="token operator">:</span>config<span class="token operator">></span>        <span class="token operator">&lt;</span>aop<span class="token operator">:</span>pointcut expression<span class="token operator">=</span><span class="token string">"execution(* com.hlk.service.*.*(..))"</span> id<span class="token operator">=</span><span class="token string">"serviceOperation"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>aop<span class="token operator">:</span>advisor advice<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"txAdvice"</span> pointcut<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"serviceOperation"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>config<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><h2 id="applicationContext-xml-1"><a href="#applicationContext-xml-1" class="headerlink" title="applicationContext.xml "></a><font color="red"><strong>applicationContext.xml</strong> </font></h2><p><strong>总结：</strong>该文件主要是为了配置事务（而事务需要sessionFactory，sessionFactory需要数据源等信息）和批量执行的SqlSession  </p><ul><li>配置事务(需要sessionFactory)  </li><li>配置sessionFactory(需要数据源及其他配置，如指定数据库方言、显示sql语句和自动建表)</li><li>配置数据源:设置驱动、数据库的URL、数据库的用户名及密码<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>  xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>  xmlns<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>  xmlns<span class="token operator">:</span>aop<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/aop"</span>  xmlns<span class="token operator">:</span>tx<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/tx"</span>  xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"  http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans   http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">4.2</span><span class="token punctuation">.</span>xsd   http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context   http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context<span class="token operator">/</span>spring<span class="token operator">-</span>context<span class="token operator">-</span><span class="token number">4.2</span><span class="token punctuation">.</span>xsd   http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop   http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop<span class="token operator">/</span>spring<span class="token operator">-</span>aop<span class="token operator">-</span><span class="token number">4.2</span><span class="token punctuation">.</span>xsd   http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>tx   http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>tx<span class="token operator">/</span>spring<span class="token operator">-</span>tx<span class="token punctuation">.</span>xsd"<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>        数据源配置        <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">1</span><span class="token punctuation">.</span> 配置读取jdbc<span class="token punctuation">.</span>properties文件 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>context<span class="token operator">:</span>property<span class="token operator">-</span>placeholder location<span class="token operator">=</span><span class="token string">"classpath:jdbc.properties"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">2</span><span class="token punctuation">.</span> 配置C3P0连接池 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"C3P0DataSource"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span> <span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"jdbcUrl"</span> value<span class="token operator">=</span><span class="token string">"${jdbc.url}"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driverClass"</span> value<span class="token operator">=</span><span class="token string">"${jdbc.driver}"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"user"</span> value<span class="token operator">=</span><span class="token string">"${jdbc.username}"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"${jdbc.password}"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>        业务注册        <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Service的注册 业务逻辑注册 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置扫描器 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.crud.service"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>        整合Mybatis        <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">1</span><span class="token punctuation">.</span> 注册SqlSessionFactoryBean <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"sqlSessionFactory"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.mybatis.spring.SqlSessionFactoryBean"</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 指定mybatis主配置文件的位置 <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"configLocation"</span> value<span class="token operator">=</span><span class="token string">"classpath:mybatis.xml"</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 连接池注入 <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"C3P0DataSource"</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 指定mapper文件的位置 <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"mapperLocations"</span> value<span class="token operator">=</span><span class="token string">"classpath:mapper/*.xml"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>        sqlSessionFactory 配置完成        <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>        使用sqlSessionFactory批量执行的SqlSession        <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"sqlSession"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.mybatis.spring.SqlSessionTemplate"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"sqlSessionFactory"</span> ref<span class="token operator">=</span><span class="token string">"sqlSessionFactory"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"executorType"</span> value<span class="token operator">=</span><span class="token string">"BATCH"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>        使用C3P0DataSource事务配置        <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">1</span><span class="token punctuation">.</span> 配置事务管理器 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"transactionManager"</span>      <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 控制住数据源 <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"C3P0DataSource"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">2</span><span class="token punctuation">.</span> 注册事务通知 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 比较重要的要使用配置式 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>tx<span class="token operator">:</span>advice id<span class="token operator">=</span><span class="token string">"transactionAdvice"</span> transaction<span class="token operator">-</span>manager<span class="token operator">=</span><span class="token string">"transactionManager"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>tx<span class="token operator">:</span>attributes<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 所有方法都是事务方法 <span class="token operator">--</span><span class="token operator">></span>          <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"*"</span> isolation<span class="token operator">=</span><span class="token string">"DEFAULT"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span><span class="token operator">/</span><span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> get查询方法为只读，优化查询效率 <span class="token operator">--</span><span class="token operator">></span>          <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"get*"</span> read<span class="token operator">-</span>only<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>tx<span class="token operator">:</span>attributes<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>tx<span class="token operator">:</span>advice<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">3</span><span class="token punctuation">.</span> aop配置 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>aop<span class="token operator">:</span>config<span class="token operator">></span>      <span class="token operator">&lt;</span>aop<span class="token operator">:</span>pointcut expression<span class="token operator">=</span><span class="token string">"execution(* com.crud.service..*(..))"</span> id<span class="token operator">=</span><span class="token string">"myPointCut"</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>aop<span class="token operator">:</span>advisor advice<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"transactionAdvice"</span> pointcut<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"myPointCut"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>config<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml "></a><font color="red"><strong>web.xml</strong> </font></h3></li></ul><p><strong>总结：</strong></p><ul><li>配置欢迎页面:当用户在浏览器中输入的URL不包含某个servlet名或JSP页面时，welcome-file-list元素可指定显示的默认文件。</li><li>配置Spring配置文件 即applicationContext.xml</li><li>配置编码过滤器</li><li>配置Spring监听器</li><li>配置SpringMVC 即spring-mvc.xml<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>web<span class="token operator">-</span>app xmlns<span class="token operator">=</span><span class="token string">"http://xmlns.jcp.org/xml/ns/javaee"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>xmlns<span class="token punctuation">.</span>jcp<span class="token punctuation">.</span>org<span class="token operator">/</span>xml<span class="token operator">/</span>ns<span class="token operator">/</span>javaee       http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>xmlns<span class="token punctuation">.</span>jcp<span class="token punctuation">.</span>org<span class="token operator">/</span>xml<span class="token operator">/</span>ns<span class="token operator">/</span>javaee<span class="token operator">/</span>web<span class="token operator">-</span>app_3_1<span class="token punctuation">.</span>xsd"       version<span class="token operator">=</span><span class="token string">"3.1"</span><span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> displayname 只是用来显示项目名称 可配置可不配置 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>display<span class="token operator">-</span>name<span class="token operator">></span>Student_Information<span class="token operator">&lt;</span><span class="token operator">/</span>display<span class="token operator">-</span>name<span class="token operator">></span><span class="token operator">&lt;</span>welcome<span class="token operator">-</span>file<span class="token operator">-</span>list<span class="token operator">></span>  <span class="token operator">&lt;</span>welcome<span class="token operator">-</span>file<span class="token operator">></span><span class="token operator">/</span>WEB<span class="token operator">-</span>INF<span class="token operator">/</span>pages<span class="token operator">/</span>index<span class="token punctuation">.</span>jsp<span class="token operator">&lt;</span><span class="token operator">/</span>welcome<span class="token operator">-</span>file<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>welcome<span class="token operator">-</span>file<span class="token operator">-</span>list<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 读取spring配置文件 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>context<span class="token operator">-</span>param<span class="token operator">></span>  <span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">></span>contextConfigLocation<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">></span>  <span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">></span>classpath<span class="token operator">:</span>conf<span class="token operator">/</span>applicationContext<span class="token punctuation">.</span>xml<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">-</span>param<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 编码过滤器 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>filter<span class="token operator">></span>  <span class="token operator">&lt;</span>filter<span class="token operator">-</span>name<span class="token operator">></span>encodingFilter<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>name<span class="token operator">></span>  <span class="token operator">&lt;</span>filter<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>CharacterEncodingFilter<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>  <span class="token operator">&lt;</span>async<span class="token operator">-</span>supported<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>async<span class="token operator">-</span>supported<span class="token operator">></span>  <span class="token operator">&lt;</span>init<span class="token operator">-</span>param<span class="token operator">></span>    <span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">></span>encoding<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">></span>    <span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">></span>UTF<span class="token operator">-</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>init<span class="token operator">-</span>param<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">></span><span class="token operator">&lt;</span>filter<span class="token operator">-</span>mapping<span class="token operator">></span>  <span class="token operator">&lt;</span>filter<span class="token operator">-</span>name<span class="token operator">></span>encodingFilter<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>name<span class="token operator">></span>  <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token operator">/</span><span class="token operator">*</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>mapping<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置Spring监听器 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>listener<span class="token operator">></span>  <span class="token operator">&lt;</span>listener<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ContextLoaderListener<span class="token operator">&lt;</span><span class="token operator">/</span>listener<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>listener<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 添加对SpringMVC的支持 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>servlet<span class="token operator">></span>  <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>SpringMVC<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>  <span class="token operator">&lt;</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>DispatcherServlet<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>  <span class="token operator">&lt;</span>init<span class="token operator">-</span>param<span class="token operator">></span>    <span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">></span>contextConfigLocation<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">></span>    <span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">></span>classpath<span class="token operator">:</span>conf<span class="token operator">/</span>spring<span class="token operator">-</span>mvc<span class="token punctuation">.</span>xml<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>init<span class="token operator">-</span>param<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">></span><span class="token operator">&lt;</span>servlet<span class="token operator">-</span>mapping<span class="token operator">></span>  <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>SpringMVC<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>  <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>mapping<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>web<span class="token operator">-</span>app<span class="token operator">></span></code></pre></li></ul><h3 id="内容三："><a href="#内容三：" class="headerlink" title="内容三："></a><strong>内容三：</strong></h3><p>配置字符编码过滤器<br>先配置过滤的实现类<br>再配置被过滤的请求类型 /* 表示所有</p><pre class=" language-java"><code class="language-java">   <span class="token operator">&lt;</span>filter<span class="token operator">></span>        <span class="token operator">&lt;</span>filter<span class="token operator">-</span>name<span class="token operator">></span>encodingFilter<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>name<span class="token operator">></span>        <span class="token operator">&lt;</span>filter<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>CharacterEncodingFilter<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>        <span class="token operator">&lt;</span>init<span class="token operator">-</span>param<span class="token operator">></span>            <span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">></span>encoding<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">></span>            <span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">></span>UTF<span class="token operator">-</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>init<span class="token operator">-</span>param<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">></span>    <span class="token operator">&lt;</span>filter<span class="token operator">-</span>mapping<span class="token operator">></span>        <span class="token operator">&lt;</span>filter<span class="token operator">-</span>name<span class="token operator">></span>encodingFilter<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>name<span class="token operator">></span>        <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token operator">/</span><span class="token operator">*</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">-</span>pattern<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>mapping<span class="token operator">></span></code></pre><h3 id="内容四："><a href="#内容四：" class="headerlink" title="内容四："></a><strong>内容四：</strong></h3><p>配置Spring的监听器<br>和SpribgMVC转发器以及拦截的请求类型</p><pre class=" language-java"><code class="language-java">  <span class="token operator">&lt;</span>listener<span class="token operator">></span>        <span class="token operator">&lt;</span>listener<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ContextLoaderListener<span class="token operator">&lt;</span><span class="token operator">/</span>listener<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>listener<span class="token operator">></span>    <span class="token operator">&lt;</span>servlet<span class="token operator">></span>        <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>springMVC<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>        <span class="token operator">&lt;</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>DispatcherServlet<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>        <span class="token operator">&lt;</span>init<span class="token operator">-</span>param<span class="token operator">></span>            <span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">></span>contextConfigLocation<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">></span>            <span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">></span>classpath<span class="token operator">:</span>spring<span class="token operator">-</span>mvc<span class="token punctuation">.</span>xml<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>init<span class="token operator">-</span>param<span class="token operator">></span>        <span class="token operator">&lt;</span>load<span class="token operator">-</span>on<span class="token operator">-</span>startup<span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>load<span class="token operator">-</span>on<span class="token operator">-</span>startup<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">></span>    <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>mapping<span class="token operator">></span>        <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>springMVC<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>        <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token keyword">do</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">-</span>pattern<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>mapping<span class="token operator">></span></code></pre><p>init-param使用方法：由于init-param是配置在servlet中，属于某一下servlet，存放在getServletConfig中，因此使用方法是：getServletConfig().getInitParameter(“user1”); 由于它属于当前的servlet类，所以用this替代getServletConfig(), 使用this.getInitParmeter(“user1”) , 如：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span><span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span>IOException<span class="token punctuation">{</span>        String user<span class="token operator">=</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//或this.getInitParmeter("user1");</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span></code></pre><h3 id="内容五："><a href="#内容五：" class="headerlink" title="内容五："></a><strong>内容五：</strong></h3><p>配置各种错误返回类型所对应的返回页面</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>error<span class="token operator">-</span>page<span class="token operator">></span>        <span class="token operator">&lt;</span>error<span class="token operator">-</span>code<span class="token operator">></span><span class="token number">404</span><span class="token operator">&lt;</span><span class="token operator">/</span>error<span class="token operator">-</span>code<span class="token operator">></span>        <span class="token operator">&lt;</span>location<span class="token operator">></span><span class="token operator">/</span>main<span class="token punctuation">.</span>jsp<span class="token operator">&lt;</span><span class="token operator">/</span>location<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>error<span class="token operator">-</span>page<span class="token operator">></span>    <span class="token operator">&lt;</span>error<span class="token operator">-</span>page<span class="token operator">></span>        <span class="token operator">&lt;</span>error<span class="token operator">-</span>code<span class="token operator">></span><span class="token number">500</span><span class="token operator">&lt;</span><span class="token operator">/</span>error<span class="token operator">-</span>code<span class="token operator">></span>        <span class="token operator">&lt;</span>location<span class="token operator">></span><span class="token operator">/</span>main<span class="token punctuation">.</span>jsp<span class="token operator">&lt;</span><span class="token operator">/</span>location<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>error<span class="token operator">-</span>page<span class="token operator">></span></code></pre><h1 id="web-xml-1"><a href="#web-xml-1" class="headerlink" title="web.xml"></a><strong>web.xml</strong></h1><p><strong>总结：</strong></p><ul><li><p>注册Spring配置文件的位置 即applicationContext.xml</p></li><li><p>注册ServletContext监听器</p></li><li><p>注册ServletContext监听器</p></li><li><p>配置中央调度器 拦截所有请求 即spring-mvc.xml</p></li><li><p>使用Rest风格的URI</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>web<span class="token operator">-</span>app xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>  xmlns<span class="token operator">=</span><span class="token string">"http://java.sun.com/xml/ns/javaee"</span>  xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span>  id<span class="token operator">=</span><span class="token string">"WebApp_ID"</span> version<span class="token operator">=</span><span class="token string">"2.5"</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">2.1</span> 注册Spring配置文件的位置 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>context<span class="token operator">-</span>param<span class="token operator">></span>      <span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">></span>contextConfigLocation<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">></span>      <span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">></span>classpath<span class="token operator">:</span>applicationContext<span class="token punctuation">.</span>xml<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">-</span>param<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">2.2</span> 注册ServletContext监听器 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 用于创建Spring容器对象放入ServletContext的域属性空间中，保证整个应用中的Spring容器唯一 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>listener<span class="token operator">></span>      <span class="token operator">&lt;</span>listener<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ContextLoaderListener<span class="token operator">&lt;</span><span class="token operator">/</span>listener<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>listener<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">2.3</span> 注册ServletContext监听器 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 用于解决请求参数中的中文乱码问题 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>filter<span class="token operator">></span>      <span class="token operator">&lt;</span>filter<span class="token operator">-</span>name<span class="token operator">></span>CharacterEncodingFilter<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>name<span class="token operator">></span>      <span class="token operator">&lt;</span>filter<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>CharacterEncodingFilter<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>      <span class="token operator">&lt;</span>init<span class="token operator">-</span>param<span class="token operator">></span>          <span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">></span>encoding<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">></span>          <span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">></span>utf<span class="token operator">-</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>init<span class="token operator">-</span>param<span class="token operator">></span>      <span class="token operator">&lt;</span>init<span class="token operator">-</span>param<span class="token operator">></span>          <span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">></span>forceRequestEncoding<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">></span>          <span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>init<span class="token operator">-</span>param<span class="token operator">></span>      <span class="token operator">&lt;</span>init<span class="token operator">-</span>param<span class="token operator">></span>          <span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">></span>forceReponseEncoding<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">></span>          <span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>init<span class="token operator">-</span>param<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">></span>  <span class="token operator">&lt;</span>filter<span class="token operator">-</span>mapping<span class="token operator">></span>      <span class="token operator">&lt;</span>filter<span class="token operator">-</span>name<span class="token operator">></span>CharacterEncodingFilter<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>name<span class="token operator">></span>      <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token operator">/</span><span class="token operator">*</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">-</span>pattern<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>mapping<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">2.4</span> 配置中央调度器 拦截所有请求<span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>servlet<span class="token operator">></span>      <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>springmvc<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>      <span class="token operator">&lt;</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>DispatcherServlet<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>      <span class="token operator">&lt;</span>init<span class="token operator">-</span>param<span class="token operator">></span>          <span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">></span>contextConfigLocation<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">></span>          <span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">></span>classpath<span class="token operator">:</span>spring<span class="token operator">-</span>mvc<span class="token punctuation">.</span>xml<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>init<span class="token operator">-</span>param<span class="token operator">></span>      <span class="token operator">&lt;</span>load<span class="token operator">-</span>on<span class="token operator">-</span>startup<span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>load<span class="token operator">-</span>on<span class="token operator">-</span>startup<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">></span>  <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>mapping<span class="token operator">></span>      <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>springmvc<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>      <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">-</span>pattern<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>mapping<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">2.5</span> 使用Rest风格的URI <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>filter<span class="token operator">></span>      <span class="token operator">&lt;</span>filter<span class="token operator">-</span>name<span class="token operator">></span>HiddenHttpMethodFilter<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>name<span class="token operator">></span>      <span class="token operator">&lt;</span>filter<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>HiddenHttpMethodFilter<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">></span>  <span class="token operator">&lt;</span>filter<span class="token operator">-</span>mapping<span class="token operator">></span>      <span class="token operator">&lt;</span>filter<span class="token operator">-</span>name<span class="token operator">></span>HiddenHttpMethodFilter<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>name<span class="token operator">></span>      <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token operator">/</span><span class="token operator">*</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">-</span>pattern<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>mapping<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 解决无法直接发送PUT请求，带着请求体的问题，在修改员工信息的时候使用 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>filter<span class="token operator">></span>      <span class="token operator">&lt;</span>filter<span class="token operator">-</span>name<span class="token operator">></span>HttpPutFormContentFilter<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>name<span class="token operator">></span>      <span class="token operator">&lt;</span>filter<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>HttpPutFormContentFilter<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">></span>  <span class="token operator">&lt;</span>filter<span class="token operator">-</span>mapping<span class="token operator">></span>      <span class="token operator">&lt;</span>filter<span class="token operator">-</span>name<span class="token operator">></span>HttpPutFormContentFilter<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>name<span class="token operator">></span>      <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token operator">/</span><span class="token operator">*</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">-</span>pattern<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>mapping<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>web<span class="token operator">-</span>app<span class="token operator">></span></code></pre><h1 id="Spring-xml"><a href="#Spring-xml" class="headerlink" title="Spring.xml"></a><strong>Spring.xml</strong></h1><h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a><strong>第一种</strong></h2></li></ul><p><strong>总结：</strong>该文件主要是配置Hibernate事务（而事务需要sessionFactory，sessionFactory需要数据源等信息）</p><ul><li>配置Hibernate事务(需要sessionFactory)  </li><li>配置sessionFactory(需要数据源及其他配置，如指定数据库方言、显示sql语句和自动建表)</li><li>配置数据源:设置驱动、数据库的URL、数据库的用户名及密码<h3 id="将hibernate的SessionFactory交由spring管理-sessionFactory需要dataSource"><a href="#将hibernate的SessionFactory交由spring管理-sessionFactory需要dataSource" class="headerlink" title="将hibernate的SessionFactory交由spring管理:sessionFactory需要dataSource"></a><strong>将hibernate的SessionFactory交由spring管理:sessionFactory需要dataSource</strong></h3><img src="https://github.com/54321decba/tu/blob/master/blog/20180928122.png?raw=true">  <pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>  xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns<span class="token operator">:</span>aop<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/aop"</span>  xmlns<span class="token operator">:</span>tx<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/tx"</span>  xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"          http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">2.5</span><span class="token punctuation">.</span>xsd          http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop<span class="token operator">/</span>spring<span class="token operator">-</span>aop<span class="token operator">-</span><span class="token number">2.5</span><span class="token punctuation">.</span>xsd          http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>tx http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>tx<span class="token operator">/</span>spring<span class="token operator">-</span>tx<span class="token operator">-</span><span class="token number">2.5</span><span class="token punctuation">.</span>xsd"<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置数据源 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"dataSource"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 驱动名称oracle<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>OracleDriver <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driverClassName"</span> value<span class="token operator">=</span><span class="token string">"com.mysql.jdbc.Driver"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 连接数据库的URL jdbc<span class="token operator">:</span>oracle<span class="token operator">:</span>thin<span class="token operator">:</span><span class="token annotation punctuation">@localhost</span><span class="token operator">:</span><span class="token number">1521</span><span class="token operator">:</span>orcl <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"url"</span> value<span class="token operator">=</span><span class="token string">"jdbc:mysql://localhost:3306/test1"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 连接数据库的用户名 <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"root"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 连接数据库的密码 <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"135246"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置SessionFactory <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"sessionFactory"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.orm.hibernate3.LocalSessionFactoryBean"</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 指定数据源 <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 指定hibernate的相关属性 <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"hibernateProperties"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>props<span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 指定数据库方言org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>dialect<span class="token punctuation">.</span>Oracle10gDialect <span class="token operator">--</span><span class="token operator">></span>              <span class="token operator">&lt;</span>prop key<span class="token operator">=</span><span class="token string">"hibernate.dialect"</span><span class="token operator">></span>org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>dialect<span class="token punctuation">.</span>MySQLInnoDBDialect<span class="token operator">&lt;</span><span class="token operator">/</span>prop<span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 显示SQL语句 <span class="token operator">--</span><span class="token operator">></span>              <span class="token operator">&lt;</span>prop key<span class="token operator">=</span><span class="token string">"hibernate.show_sql"</span><span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>prop<span class="token operator">></span>              <span class="token operator">&lt;</span>prop key<span class="token operator">=</span><span class="token string">"hibernate.hbm2ddl.auto"</span><span class="token operator">></span>create<span class="token operator">&lt;</span><span class="token operator">/</span>prop<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>props<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 指定ORM映射文件 <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"mappingResources"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>list<span class="token operator">></span>              <span class="token operator">&lt;</span>value<span class="token operator">></span>com<span class="token operator">/</span>pb<span class="token operator">/</span>entity<span class="token operator">/</span>User<span class="token punctuation">.</span>hbm<span class="token punctuation">.</span>xml<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>list<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Hibernate声明式事务 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"transactionManager"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.orm.hibernate3.HibernateTransactionManager"</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 注入sessionFactory属性 <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"sessionFactory"</span> ref<span class="token operator">=</span><span class="token string">"sessionFactory"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 数据访问层<span class="token punctuation">(</span>DAO<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 基类Dao <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"baseDao"</span> <span class="token keyword">abstract</span><span class="token operator">=</span><span class="token string">"true"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.pb.dao.impl.BaseDaoImpl"</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 注入SessionFactory属性 <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"sessionFactory"</span> ref<span class="token operator">=</span><span class="token string">"sessionFactory"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 注入ptm属性 <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"ptm"</span> ref<span class="token operator">=</span><span class="token string">"transactionManager"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> UserDao <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userDao"</span> parent<span class="token operator">=</span><span class="token string">"baseDao"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.pb.dao.impl.UserDaoImpl"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 业务逻辑层<span class="token punctuation">(</span>BIZ<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> UserBiz <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userBiz"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.pb.biz.impl.UserBizImpl"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dao"</span> ref<span class="token operator">=</span><span class="token string">"userDao"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 控制层 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 基类Action <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"baseAction"</span> <span class="token keyword">abstract</span><span class="token operator">=</span><span class="token string">"true"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.pb.web.action.BaseAction"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置UserAction <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userAction"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.pb.web.action.UserAction"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"biz"</span> ref<span class="token operator">=</span><span class="token string">"userBiz"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a><strong>第二种</strong></h2><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>  xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>  xmlns<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>  xmlns<span class="token operator">:</span>aop<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/aop"</span>  xmlns<span class="token operator">:</span>tx<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/tx"</span>  xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans   http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">3.1</span><span class="token punctuation">.</span>xsd  http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context  http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context<span class="token operator">/</span>spring<span class="token operator">-</span>context<span class="token punctuation">.</span>xsd  http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop  http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop<span class="token operator">/</span>spring<span class="token operator">-</span>aop<span class="token punctuation">.</span>xsd  http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>tx   http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>tx<span class="token operator">/</span>spring<span class="token operator">-</span>tx<span class="token punctuation">.</span>xsd"<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置连接池<span class="token operator">:</span> <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 引入外部属性文件 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>context<span class="token operator">:</span>property<span class="token operator">-</span>placeholder location<span class="token operator">=</span><span class="token string">"classpath:jdbc.properties"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置C3P0连接池<span class="token operator">:</span> <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"dataSource"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driverClass"</span> value<span class="token operator">=</span><span class="token string">"${jdbc.driver}"</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"jdbcUrl"</span> value<span class="token operator">=</span><span class="token string">"${jdbc.url}"</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"user"</span> value<span class="token operator">=</span><span class="token string">"${jdbc.user}"</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"${jdbc.password}"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Hibernate的相关信息 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"sessionFactory"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.orm.hibernate3.LocalSessionFactoryBean"</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 注入连接池 <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置Hibernate的其他的属性 <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"hibernateProperties"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>props<span class="token operator">></span>              <span class="token operator">&lt;</span>prop key<span class="token operator">=</span><span class="token string">"hibernate.dialect"</span><span class="token operator">></span>org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>dialect<span class="token punctuation">.</span>MySQLDialect<span class="token operator">&lt;</span><span class="token operator">/</span>prop<span class="token operator">></span>              <span class="token operator">&lt;</span>prop key<span class="token operator">=</span><span class="token string">"hibernate.show_sql"</span><span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>prop<span class="token operator">></span>              <span class="token operator">&lt;</span>prop key<span class="token operator">=</span><span class="token string">"hibernate.format_sql"</span><span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>prop<span class="token operator">></span>              <span class="token operator">&lt;</span>prop key<span class="token operator">=</span><span class="token string">"hibernate.connection.autocommit"</span><span class="token operator">></span><span class="token boolean">false</span><span class="token operator">&lt;</span><span class="token operator">/</span>prop<span class="token operator">></span>              <span class="token operator">&lt;</span>prop key<span class="token operator">=</span><span class="token string">"hibernate.hbm2ddl.auto"</span><span class="token operator">></span>update<span class="token operator">&lt;</span><span class="token operator">/</span>prop<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>props<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置Hibernate的映射文件 <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"mappingResources"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>list<span class="token operator">></span>              <span class="token operator">&lt;</span>value<span class="token operator">></span>cn<span class="token operator">/</span>itcast<span class="token operator">/</span>shop<span class="token operator">/</span>user<span class="token operator">/</span>vo<span class="token operator">/</span>User<span class="token punctuation">.</span>hbm<span class="token punctuation">.</span>xml<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>              <span class="token operator">&lt;</span>value<span class="token operator">></span>cn<span class="token operator">/</span>itcast<span class="token operator">/</span>shop<span class="token operator">/</span>category<span class="token operator">/</span>vo<span class="token operator">/</span>Category<span class="token punctuation">.</span>hbm<span class="token punctuation">.</span>xml<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>              <span class="token operator">&lt;</span>value<span class="token operator">></span>cn<span class="token operator">/</span>itcast<span class="token operator">/</span>shop<span class="token operator">/</span>product<span class="token operator">/</span>vo<span class="token operator">/</span>Product<span class="token punctuation">.</span>hbm<span class="token punctuation">.</span>xml<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>              <span class="token operator">&lt;</span>value<span class="token operator">></span>cn<span class="token operator">/</span>itcast<span class="token operator">/</span>shop<span class="token operator">/</span>categorysecond<span class="token operator">/</span>vo<span class="token operator">/</span>CategorySecond<span class="token punctuation">.</span>hbm<span class="token punctuation">.</span>xml<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>              <span class="token operator">&lt;</span>value<span class="token operator">></span>cn<span class="token operator">/</span>itcast<span class="token operator">/</span>shop<span class="token operator">/</span>order<span class="token operator">/</span>vo<span class="token operator">/</span>Order<span class="token punctuation">.</span>hbm<span class="token punctuation">.</span>xml<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>              <span class="token operator">&lt;</span>value<span class="token operator">></span>cn<span class="token operator">/</span>itcast<span class="token operator">/</span>shop<span class="token operator">/</span>order<span class="token operator">/</span>vo<span class="token operator">/</span>OrderItem<span class="token punctuation">.</span>hbm<span class="token punctuation">.</span>xml<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>              <span class="token operator">&lt;</span>value<span class="token operator">></span>cn<span class="token operator">/</span>itcast<span class="token operator">/</span>shop<span class="token operator">/</span>adminuser<span class="token operator">/</span>vo<span class="token operator">/</span>AdminUser<span class="token punctuation">.</span>hbm<span class="token punctuation">.</span>xml<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>list<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 事务管理<span class="token operator">:</span> <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 事务管理器 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"transactionManager"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.orm.hibernate3.HibernateTransactionManager"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"sessionFactory"</span> ref<span class="token operator">=</span><span class="token string">"sessionFactory"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 开启注解事务 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>tx<span class="token operator">:</span>annotation<span class="token operator">-</span>driven transaction<span class="token operator">-</span>manager<span class="token operator">=</span><span class="token string">"transactionManager"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Action的配置 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 首页访问的Action <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"indexAction"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.itcast.shop.index.action.IndexAction"</span> scope<span class="token operator">=</span><span class="token string">"prototype"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"categoryService"</span> ref<span class="token operator">=</span><span class="token string">"categoryService"</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"productService"</span> ref<span class="token operator">=</span><span class="token string">"productService"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置验证码Action <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"checkImgAction"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.itcast.shop.user.action.CheckImgAction"</span> scope<span class="token operator">=</span><span class="token string">"prototype"</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 用户模块的Action <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userAction"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.itcast.shop.user.action.UserAction"</span> scope<span class="token operator">=</span><span class="token string">"prototype"</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 注入Service <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"userService"</span> ref<span class="token operator">=</span><span class="token string">"userService"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 商品模块的Action <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"productAction"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.itcast.shop.product.action.ProductAction"</span> scope<span class="token operator">=</span><span class="token string">"prototype"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"productService"</span> ref<span class="token operator">=</span><span class="token string">"productService"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 购物车的Action <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"cartAction"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.itcast.shop.cart.action.CartAction"</span> scope<span class="token operator">=</span><span class="token string">"prototype"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"productService"</span> ref<span class="token operator">=</span><span class="token string">"productService"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置OrderAction <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"orderAction"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.itcast.shop.order.action.OrderAction"</span> scope<span class="token operator">=</span><span class="token string">"prototype"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"orderService"</span> ref<span class="token operator">=</span><span class="token string">"orderService"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置后台登录的Action <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"adminUserAction"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.itcast.shop.adminuser.action.AdminUserAction"</span> scope<span class="token operator">=</span><span class="token string">"prototype"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"adminUserService"</span> ref<span class="token operator">=</span><span class="token string">"adminUserService"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置后台一级管理的Action <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"adminCategoryAction"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.itcast.shop.category.adminaction.AdminCategoryAction"</span> scope<span class="token operator">=</span><span class="token string">"prototype"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"categoryService"</span> ref<span class="token operator">=</span><span class="token string">"categoryService"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置后台二级分类管理的Action <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"adminCategorySecondAction"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.itcast.shop.categorysecond.adminaction.AdminCategorySecondAction"</span> scope<span class="token operator">=</span><span class="token string">"prototype"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"categorySecondService"</span> ref<span class="token operator">=</span><span class="token string">"categorySecondService"</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"categoryService"</span> ref<span class="token operator">=</span><span class="token string">"categoryService"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置后台商品管理的Action <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"adminProductAction"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.itcast.shop.product.adminaction.AdminProductAction"</span> scope<span class="token operator">=</span><span class="token string">"prototype"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"productService"</span> ref<span class="token operator">=</span><span class="token string">"productService"</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"categorySecondService"</span> ref<span class="token operator">=</span><span class="token string">"categorySecondService"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置后台订单管理的Action <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"adminOrderAction"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.itcast.shop.order.adminaction.AdminOrderAction"</span> scope<span class="token operator">=</span><span class="token string">"prototype"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"orderService"</span> ref<span class="token operator">=</span><span class="token string">"orderService"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置后台用户管理的Action <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userAdminAction"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.itcast.shop.user.adminaction.UserAdminAction"</span> scope<span class="token operator">=</span><span class="token string">"prototype"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"userService"</span> ref<span class="token operator">=</span><span class="token string">"userService"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Service的配置  <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.itcast.shop.user.service.UserService"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"userDao"</span> ref<span class="token operator">=</span><span class="token string">"userDao"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"categoryService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.itcast.shop.category.service.CategoryService"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"categoryDao"</span> ref<span class="token operator">=</span><span class="token string">"categoryDao"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"productService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.itcast.shop.product.service.ProductService"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"productDao"</span> ref<span class="token operator">=</span><span class="token string">"productDao"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"orderService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.itcast.shop.order.service.OrderService"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"orderDao"</span> ref<span class="token operator">=</span><span class="token string">"orderDao"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"adminUserService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.itcast.shop.adminuser.service.AdminUserService"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"adminUserDao"</span> ref<span class="token operator">=</span><span class="token string">"adminUserDao"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"categorySecondService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.itcast.shop.categorysecond.service.CategorySecondService"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"categorySecondDao"</span> ref<span class="token operator">=</span><span class="token string">"categorySecondDao"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Dao的配置  <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userDao"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.itcast.shop.user.dao.UserDao"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"sessionFactory"</span> ref<span class="token operator">=</span><span class="token string">"sessionFactory"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"categoryDao"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.itcast.shop.category.dao.CategoryDao"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"sessionFactory"</span> ref<span class="token operator">=</span><span class="token string">"sessionFactory"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>      <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"productDao"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.itcast.shop.product.dao.ProductDao"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"sessionFactory"</span> ref<span class="token operator">=</span><span class="token string">"sessionFactory"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"orderDao"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.itcast.shop.order.dao.OrderDao"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"sessionFactory"</span> ref<span class="token operator">=</span><span class="token string">"sessionFactory"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"adminUserDao"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.itcast.shop.adminuser.dao.AdminUserDao"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"sessionFactory"</span> ref<span class="token operator">=</span><span class="token string">"sessionFactory"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"categorySecondDao"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.itcast.shop.categorysecond.dao.CategorySecondDao"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"sessionFactory"</span> ref<span class="token operator">=</span><span class="token string">"sessionFactory"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre>jdbc.properties<pre class=" language-java"><code class="language-java">jdbc<span class="token punctuation">.</span>driver <span class="token operator">=</span> com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driverjdbc<span class="token punctuation">.</span>url <span class="token operator">=</span> jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token comment" spellcheck="true">//shop</span>jdbc<span class="token punctuation">.</span>user <span class="token operator">=</span> rootjdbc<span class="token punctuation">.</span>password <span class="token operator">=</span><span class="token number">135246</span></code></pre><h3 id="beans-xml文件"><a href="#beans-xml文件" class="headerlink" title="beans.xml文件"></a><strong>beans.xml文件</strong></h3><img src="https://github.com/54321decba/tu/blob/master/blog/2018092897.png?raw=true">  <h1 id="Spring的ContextLoaderListener"><a href="#Spring的ContextLoaderListener" class="headerlink" title="Spring的ContextLoaderListener"></a><strong>Spring的ContextLoaderListener</strong></h1></li></ul><p><strong>在配置文件中的配置示例：</strong></p><pre class=" language-java"><code class="language-java">  <span class="token operator">&lt;</span>listener<span class="token operator">></span>    <span class="token operator">&lt;</span>listener<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ContextLoaderListener<span class="token operator">&lt;</span><span class="token operator">/</span>listener<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>listener<span class="token operator">></span></code></pre><p><strong>解析</strong><br><code>public class ContextLoaderListener extends Object implements ServletContextListener</code><br><strong>部署配置文件、创建Bean</strong><br>实现Servlet的上下文监听器，在启动Web容器时，自动装配Spring applicationContext.xml<br>如果在web.xml中不写任何参数配置信息，默认的路径是”/WEB-INF/applicationContext.xml，在WEB-INF目录下创建的xml文件的名称必须是applicationContext.xml。如果是要自定义文件名可以在web.xml里加入contextConfigLocation这个context参数：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>context<span class="token operator">-</span>param<span class="token operator">></span><span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">></span>contextConfigLocation<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">></span><span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">></span><span class="token operator">/</span>WEB<span class="token operator">-</span>INF<span class="token operator">/</span>classes<span class="token operator">/</span>applicationContext<span class="token operator">-</span><span class="token operator">*</span><span class="token punctuation">.</span>xml<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">-</span>param<span class="token operator">></span></code></pre><h1 id="一些凤毛麟角的解释"><a href="#一些凤毛麟角的解释" class="headerlink" title="一些凤毛麟角的解释"></a><font color="red"><strong>一些凤毛麟角的解释</strong></font></h1><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span></code></pre><p>每个XML文档都由XML序言开始，在前面的代码中的第一行便是XML序言，<!--?xml version="1.0"?-->。这一行代码会告诉解析器和浏览器，这个文件应该按照1.0版本的XML规则进行解析。<br>encoding = “utf-8”表示此xml文件采用utf-8的编码格式。</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>beans xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>    xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>    xmlns<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>    xmlns<span class="token operator">:</span>aop<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/aop"</span>    xmlns<span class="token operator">:</span>tx<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/tx"</span>    xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"    http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans     http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">4.2</span><span class="token punctuation">.</span>xsd     http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context     http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context<span class="token operator">/</span>spring<span class="token operator">-</span>context<span class="token operator">-</span><span class="token number">4.2</span><span class="token punctuation">.</span>xsd     http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop     http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop<span class="token operator">/</span>spring<span class="token operator">-</span>aop<span class="token operator">-</span><span class="token number">4.2</span><span class="token punctuation">.</span>xsd     http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>tx     http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>tx<span class="token operator">/</span>spring<span class="token operator">-</span>tx<span class="token punctuation">.</span>xsd"<span class="token operator">></span></code></pre><p>xml规范与namespace</p><h2 id="mybatis-xml"><a href="#mybatis-xml" class="headerlink" title="mybatis.xml"></a><strong>mybatis.xml</strong></h2><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span> <span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE configurationPUBLIC <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span><span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>configuration<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 开启驼峰命名规则 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>settings<span class="token operator">></span>        <span class="token operator">&lt;</span>setting name<span class="token operator">=</span><span class="token string">"mapUnderscoreToCamelCase"</span> value<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>settings<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置别名 实体类的位置 方便引用<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>typeAliases<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token keyword">package</span> name<span class="token operator">=</span><span class="token string">"com.crud.dao"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>typeAliases<span class="token operator">></span>    <span class="token operator">&lt;</span>plugins<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>pagehelper为PageHelper类所在包名 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>plugin interceptor<span class="token operator">=</span><span class="token string">"com.github.pagehelper.PageInterceptor"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 不到达不正确的页码 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"reasonable"</span> value<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>plugin<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>plugins<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">></span></code></pre><h1 id="jdbc-properties文件"><a href="#jdbc-properties文件" class="headerlink" title="jdbc.properties文件"></a><strong>jdbc.properties文件</strong></h1><pre class=" language-java"><code class="language-java">jdbc<span class="token punctuation">.</span>driver<span class="token operator">=</span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driverjdbc<span class="token punctuation">.</span>url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token comment" spellcheck="true">//ssmcurd?useSSL=true</span>jdbc<span class="token punctuation">.</span>username<span class="token operator">=</span>rootjdbc<span class="token punctuation">.</span>password<span class="token operator">=</span><span class="token number">135246</span></code></pre><h1 id="spring-mvc-xml文件"><a href="#spring-mvc-xml文件" class="headerlink" title="spring-mvc.xml文件"></a><strong>spring-mvc.xml文件</strong></h1><p><strong>总结</strong>  </p><ul><li>contriller的自动扫描包</li><li>视图解析器 即页面的前缀和后缀<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>  xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns<span class="token operator">:</span>p<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/p"</span>  xmlns<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>  xmlns<span class="token operator">:</span>mvc<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/mvc"</span>  xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token operator">-</span><span class="token number">4.0</span><span class="token punctuation">.</span>xsd      http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>mvc http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>mvc<span class="token operator">/</span>spring<span class="token operator">-</span>mvc<span class="token operator">-</span><span class="token number">4.0</span><span class="token punctuation">.</span>xsd      http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context<span class="token operator">/</span>spring<span class="token operator">-</span>context<span class="token operator">-</span><span class="token number">4.0</span><span class="token punctuation">.</span>xsd"<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 跳转逻辑的配置 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 扫描业务逻辑组件，配置组件扫描器，注解式使用，只扫描控制器<span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.crud.controller"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">2</span><span class="token punctuation">.</span>配置视图解析器 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 前缀 <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"prefix"</span> value<span class="token operator">=</span><span class="token string">"/WEB-INF/views/"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 后缀 <span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"suffix"</span> value<span class="token operator">=</span><span class="token string">".jsp"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 两个标准配置 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 把spirngmvc不能处理的请求交给tomcat 比如静态资源图片等<span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>mvc<span class="token operator">:</span><span class="token keyword">default</span><span class="token operator">-</span>servlet<span class="token operator">-</span>handler<span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置注解驱动 映射动态请求 支持springmvc一些高级功能，比如JSR303校验，快捷AJAX请求<span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>mvc<span class="token operator">:</span>annotation<span class="token operator">-</span>driven<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;applicationContext-xml&quot;&gt;&lt;a href=&quot;#applicationContext-xml&quot; class=&quot;headerlink&quot; title=&quot;applicationContext.xml &quot;&gt;&lt;/a&gt;&lt;font color=&quot;red&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="配置文件" scheme="http://hellohero.51vip.biz/categories/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="配置文件" scheme="http://hellohero.51vip.biz/tags/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>rabbitmq</title>
    <link href="http://hellohero.51vip.biz/2019/07/24/rabbitmq/"/>
    <id>http://hellohero.51vip.biz/2019/07/24/rabbitmq/</id>
    <published>2019-07-24T03:55:02.000Z</published>
    <updated>2019-08-06T10:59:46.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rabbitmq简介"><a href="#rabbitmq简介" class="headerlink" title="rabbitmq简介"></a>rabbitmq简介</h1><p>使同步变异步（同步只能等方法调用完成才能调用下一个方法 异步直接返回，立即调用下一个方法）<br>流量削峰（减少服务器压力），用来接收消息，不处理消息，设置阈值，当接收到n个请求后，剩下的不发送到服务器，直接返回页面（如：手慢了！商品已被抢光了！）<br>解耦（订单调用服务和订单处理服务解耦）<br>只要机器内存足够大 消息队列就可以存无限大得信息<br>使用erlang实现的遵循amqp的产品（因为erlang天生是用于高并发 集群的）<br>rabbit中又不同的vhost 避免命名冲突、vhost中又不同类型的exchange(交换机)：direct、headers、topic、fanout<br><img src="https://oostc.oss-cn-shanghai.aliyuncs.com/blog/rabbitmq.jpg"></p><h1 id="rabbitmq组件"><a href="#rabbitmq组件" class="headerlink" title="rabbitmq组件"></a>rabbitmq组件</h1><p>消息 交换机（direct topic fanout） 队列 通道<br>交换机根据路由键决定消息发送给哪些队列（路由键在消息的头信息里）</p><h1 id="消息持久化处理"><a href="#消息持久化处理" class="headerlink" title="消息持久化处理"></a>消息持久化处理</h1><p>防止消息接收者中断监听造成消息丢失 可以在队列把autodelete设为false 或者在交换机把autodelete设为false</p><h1 id="消息ACK确认"><a href="#消息ACK确认" class="headerlink" title="消息ACK确认"></a>消息ACK确认</h1><p>如果消费者没有返回确认ack rabbitmq会一直分发 造成内存泄漏 直至内存耗尽<br>解决方法① 在代码上加try catch 处理一下<br>方法② 在配置文件添加rabbitmq重新分发的次数</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;rabbitmq简介&quot;&gt;&lt;a href=&quot;#rabbitmq简介&quot; class=&quot;headerlink&quot; title=&quot;rabbitmq简介&quot;&gt;&lt;/a&gt;rabbitmq简介&lt;/h1&gt;&lt;p&gt;使同步变异步（同步只能等方法调用完成才能调用下一个方法 异步直接返回，立即调</summary>
      
    
    
    
    <category term="消息队列" scheme="http://hellohero.51vip.biz/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
    <category term="rabbitmq" scheme="http://hellohero.51vip.biz/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>数据库索引</title>
    <link href="http://hellohero.51vip.biz/2019/07/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/"/>
    <id>http://hellohero.51vip.biz/2019/07/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/</id>
    <published>2019-07-23T19:54:26.000Z</published>
    <updated>2019-08-07T16:32:42.966Z</updated>
    
    <content type="html"><![CDATA[<p>都知道，索引可以避免全表查询，增加查询速度<br>但是，更新时就会慢，因为破坏的平衡树的结构，系统需要重新建立平衡树<br>索引分为聚簇索引和非聚簇索引<br>聚簇索引是指靠主键获取数据，非聚簇索引指某个字段被复制出来，用于生成索引，查询时通过非聚簇索引查到主键，再通过聚簇索引找到数据<br>覆盖索引指的是把所需要的字段建成复合索引，只需要通过非聚簇索引即可获取数据，不用回表查询</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;都知道，索引可以避免全表查询，增加查询速度&lt;br&gt;但是，更新时就会慢，因为破坏的平衡树的结构，系统需要重新建立平衡树&lt;br&gt;索引分为聚簇索引和非聚簇索引&lt;br&gt;聚簇索引是指靠主键获取数据，非聚簇索引指某个字段被复制出来，用于生成索引，查询时通过非聚簇索引查到主键，再通过聚簇</summary>
      
    
    
    
    <category term="数据库索引" scheme="http://hellohero.51vip.biz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/"/>
    
    
    <category term="数据库索引" scheme="http://hellohero.51vip.biz/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>数据库引擎</title>
    <link href="http://hellohero.51vip.biz/2019/07/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E6%93%8E/"/>
    <id>http://hellohero.51vip.biz/2019/07/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E6%93%8E/</id>
    <published>2019-07-23T19:40:03.000Z</published>
    <updated>2019-07-24T07:56:27.607Z</updated>
    
    <content type="html"><![CDATA[<p>ISAM主要设计于主查询辅非更新，读取快不耗很大资源，蛋不支持事务，重要数据需要自己备份<br>MYISAM在ISAM增加了索引和字段管理，还有锁表应对并发，其代价是你需要经常运行OPTIMIZE TABLE命令，来恢复被更新机制所浪费的空间<br>INNODB 虽然比其他的慢，但支持事务，可靠，适用于表更新频繁的</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ISAM主要设计于主查询辅非更新，读取快不耗很大资源，蛋不支持事务，重要数据需要自己备份&lt;br&gt;MYISAM在ISAM增加了索引和字段管理，还有锁表应对并发，其代价是你需要经常运行OPTIMIZE TABLE命令，来恢复被更新机制所浪费的空间&lt;br&gt;INNODB 虽然比其他</summary>
      
    
    
    
    <category term="数据库引擎" scheme="http://hellohero.51vip.biz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E6%93%8E/"/>
    
    
    <category term="数据库引擎" scheme="http://hellohero.51vip.biz/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>Socket</title>
    <link href="http://hellohero.51vip.biz/2019/07/24/Socket/"/>
    <id>http://hellohero.51vip.biz/2019/07/24/Socket/</id>
    <published>2019-07-23T19:13:31.000Z</published>
    <updated>2019-07-24T09:33:14.903Z</updated>
    
    <content type="html"><![CDATA[<p> 先从服务器端说起。服务器端先初始化Socket，然后与端口绑定(bind)，对端口进行监听(listen)，调用accept阻塞，等待客户端连接。在这时如果有个客户端初始化一个Socket，然后连接服务器(connect)，如果连接成功，这时客户端与服务器端的连接就建立了。客户端发送数据请求，服务器端接收请求并处理请求，然后把回应数据发送给客户端，客户端读取数据，最后关闭连接，一次交互结束。<br>int - bind - accpet - connect - read/writ - close<br>三次握手：<br>A 建立连接 一次<br>B 确认收到消息，可以连 二次<br>A 确认收到消息，建立连接 三次<br>关闭时四次握手：<br>A 我要关了 一次<br>B 收到，你可以关了 二次<br>B close 三次<br>A 收到，进入time_wait状态 四次</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 先从服务器端说起。服务器端先初始化Socket，然后与端口绑定(bind)，对端口进行监听(listen)，调用accept阻塞，等待客户端连接。在这时如果有个客户端初始化一个Socket，然后连接服务器(connect)，如果连接成功，这时客户端与服务器端的连接就建立了</summary>
      
    
    
    
    <category term="Socket" scheme="http://hellohero.51vip.biz/categories/Socket/"/>
    
    
    <category term="Socket" scheme="http://hellohero.51vip.biz/tags/Socket/"/>
    
  </entry>
  
  <entry>
    <title>数据库优化</title>
    <link href="http://hellohero.51vip.biz/2019/07/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/"/>
    <id>http://hellohero.51vip.biz/2019/07/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/</id>
    <published>2019-07-23T01:48:58.000Z</published>
    <updated>2019-07-24T07:56:42.620Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用适当的字段属性"><a href="#使用适当的字段属性" class="headerlink" title="使用适当的字段属性"></a>使用适当的字段属性</h2><h2 id="多使用枚举和NOTNULL-避免NULL值判断"><a href="#多使用枚举和NOTNULL-避免NULL值判断" class="headerlink" title="多使用枚举和NOTNULL 避免NULL值判断"></a>多使用枚举和NOTNULL 避免NULL值判断</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用适当的字段属性&quot;&gt;&lt;a href=&quot;#使用适当的字段属性&quot; class=&quot;headerlink&quot; title=&quot;使用适当的字段属性&quot;&gt;&lt;/a&gt;使用适当的字段属性&lt;/h2&gt;&lt;h2 id=&quot;多使用枚举和NOTNULL-避免NULL值判断&quot;&gt;&lt;a href=&quot;#多使</summary>
      
    
    
    
    <category term="数据库优化" scheme="http://hellohero.51vip.biz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="数据库优化" scheme="http://hellohero.51vip.biz/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Spring</title>
    <link href="http://hellohero.51vip.biz/2019/07/22/Spring/"/>
    <id>http://hellohero.51vip.biz/2019/07/22/Spring/</id>
    <published>2019-07-21T18:57:52.000Z</published>
    <updated>2019-07-24T08:30:10.148Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring里面applicationContext-xml文件能不能改成其他文件名？"><a href="#Spring里面applicationContext-xml文件能不能改成其他文件名？" class="headerlink" title="Spring里面applicationContext.xml文件能不能改成其他文件名？"></a>Spring里面applicationContext.xml文件能不能改成其他文件名？</h3><p>缺省情况下， 它会在WEB-INF/applicationContext.xml文件找Spring的配置。 你可以通过定义一个<context-param>元素名字为”contextConfigLocation”来改变Spring配置文件的 位置。示例如下：<br><listener><br>    <listener-class>org.springframework.web.context.ContextLoaderListener<br>        <context-param><br>         <param-name>contextConfigLocation</param-name><br>         <param-value>/WEB-INF/xyz.xml</param-value><br>        </context-param><br>    </listener-class><br></listener> </context-param></p><h3 id="IOC和DI"><a href="#IOC和DI" class="headerlink" title="IOC和DI"></a>IOC和DI</h3><p>IOC是思想 控制反转，DI是IOC的一种实现方式，是方法</p><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p>OOP允许开发者定义纵向关系，为了代码的复用性，也可以通过继承定义横向关系，但有时候模块之间并不存在子父类关系，只能通过AOP切面实现，提供代码的复用性，减少重复代码</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Spring里面applicationContext-xml文件能不能改成其他文件名？&quot;&gt;&lt;a href=&quot;#Spring里面applicationContext-xml文件能不能改成其他文件名？&quot; class=&quot;headerlink&quot; title=&quot;Spring</summary>
      
    
    
    
    <category term="Spring" scheme="http://hellohero.51vip.biz/categories/Spring/"/>
    
    
    <category term="Spring" scheme="http://hellohero.51vip.biz/tags/Spring/"/>
    
  </entry>
  
</feed>
